MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=4
comp_1=// DasBooter + IkeC - Aurora Radar / https://www.shadertoy.com/view/Mcy3WW
comp_2=// Transpiled to HLSL using Milkwave
comp_3=
comp_4=// CONV: setting iChannel samplers to default noise texture
comp_5=#define iChannel0 sampler_noise_lq
comp_6=
comp_7=#define tx sin(time)+0.5
comp_8=
comp_9=float noise3( float3 x ) {
comp_10=  float3 p = floor(x),f = frac(x);
comp_11=
comp_12=  f = f*f*(3.-2*f);
comp_13=  // or smoothstep
comp_14=  // to make derivative continuous at borders
comp_15=
comp_16=  #define hash3(p)  frac(sin(1e3*dot(p,float3(1,57,-13.7)))*4375.5453)
comp_17=
comp_18=  // rand
comp_19=
comp_20=  return lerp( lerp(lerp( hash3(p+float3(0,0,0)), hash3(p+float3(1,0,0)),f.x),
comp_21=  // triilinear interp
comp_22=  lerp( hash3(p+float3(0,1,0)), hash3(p+float3(1,1,0)),f.x),f.y),
comp_23=  lerp(lerp( hash3(p+float3(0,0,1)), hash3(p+float3(1,0,1)),f.x),
comp_24=  lerp( hash3(p+float3(0,1,1)), hash3(p+float3(1,1,1)),f.x),f.y), f.z);
comp_25=}
comp_26=
comp_27=#define noise(x) (noise3(x)+noise3(x+11.5)) / 2.
comp_28=
comp_29=// pseudoperlin improvement from foxes idea
comp_30=
comp_31=shader_body {
comp_32=  float4 O = 0;
comp_33=  float2 U  = uv;
comp_34=  // CONV: Center on screen, then try some aspect correction
comp_35=  uv = uv-1;
comp_36=  uv *= aspect.xy;
comp_37=  // CONV: Adjust this to flip the output (±uv.x, ±uv.y)
comp_38=  uv = float2(uv.x, -uv.y);
comp_39=
comp_40=  // zoom
comp_41=  uv.x = uv.x-10;
comp_42=  uv*=0.08;
comp_43=  uv*= 0.8+0.5*(sin(time*0.1)+1)/2;
comp_44=
comp_45=  float2 R = uv.xy+0.3;
comp_46=
comp_47=  float n = noise(float3(U*2.0/min(R.x,R.y), .03*time)),
comp_48=
comp_49=  // first num controls zoom, second speed.
comp_50=  v = sin(26.28*(sin(time / 25.0) + 4.)*n),
comp_51=  t = time*0.1;
comp_52=
comp_53=  #ifdef bass_smooth
comp_54=  n += (int)vis_version > 2 ? 1 : (0.35*(smoothstep(0,2,(int)vis_version == 1 ? bass_smooth : bass_att)-0.5))*vis_intensity+vis_shift;
comp_55=  #else
comp_56=  n += 0.2*(smoothstep(0,2,bass_att)-0.5);
comp_57=  #endif
comp_58=
comp_59=  v = smoothstep(1.,0, .3*abs(v)/fwidth(v));
comp_60=
comp_61=  O = lerp( exp(-50./R.y )* tex2D( iChannel0, (U+float2(cos(0.3*time),sin(0.5*t)))/R),
comp_62=  // .97
comp_63=  .5+.5*sin(05.*n+(sin(time / 10.0) * 5.0)+float4(0,2.1,-2.1,0)),
comp_64=  v );
comp_65=
comp_66=  ret = O;
comp_67=}
