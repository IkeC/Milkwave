MILKDROP_PRESET_VERSION=201
PSVERSION=2
PSVERSION_WARP=2
PSVERSION_COMP=2
[preset00]
fShader=0.000000
fDecay=1
fGammaAdj=1.980000
warp=0
zoom=1
dx=-0.001000
wrap=0
fWaveAlpha=0
per_frame_1=    phase1 = time + 3.14159*0;
per_frame_2=    phase3 = time + 3.14159*.66;
per_frame_3=    phase2 = time + 3.14159*1.33;
per_frame_4=
per_frame_5=    // the y values of the 3 strands
per_frame_6=    q1 = .5 + .04*sin(phase1);
per_frame_7=    q2 = .5 + .04*sin(phase2);
per_frame_8=    q3 = .5 + .04*sin(phase3);
per_frame_9=
per_frame_10=    // the slopes of the 3 strands
per_frame_11=    q4 = -.5*cos(.7*phase1);
per_frame_12=    q5 = -.5*cos(.7*phase2);
per_frame_13=    q6 = -.5*cos(.7*phase3);
per_frame_14=
per_frame_15=    // there are 6 possible orderings between the 3 strands:
per_frame_16=    //   123 => 132 => 312 => 321 => 231 => 213 => repeat
per_frame_17=    // the `q8` variable indicates which region we're in:
per_frame_18=    //    0  =>  1  =>  2  =>  3  =>  4  =>  5  => repeat
per_frame_19=
per_frame_20=    q8 = (6*(time+1)/3.14159)%6;
wavecode_0_enabled=1
wavecode_0_samples=500
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wave_0_per_point1=    // 1st strand (see per frame code)
wave_0_per_point2=    is1 = equal(q8, 0) | equal(q8, 1);
wave_0_per_point3=    is2 = equal(q8, 4) | equal(q8, 5);
wave_0_per_point4=    is3 = equal(q8, 2) | equal(q8, 3);
wave_0_per_point5=
wave_0_per_point6=    posx = .5;
wave_0_per_point7=    posy = is1*q1 + is2*q2 + is3*q3;
wave_0_per_point8=
wave_0_per_point9=    slopex = 0;
wave_0_per_point10=    slopey = is1*q4 + is2*q5 + is3*q6;
wave_0_per_point11=
wave_0_per_point12=    r = is1;
wave_0_per_point13=    g = is2;
wave_0_per_point14=    b = is3;
wave_0_per_point15=    a = 1;
wave_0_per_point16=
wave_0_per_point17=    x = posx;
wave_0_per_point18=    y = posy + (sample-.5)*.06*slopey;
wavecode_1_enabled=1
wavecode_1_samples=500
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wave_1_per_point1=    // 2nd strand (see per frame code)
wave_1_per_point2=    is1 = equal(q8, 2) | equal(q8, 5);
wave_1_per_point3=    is2 = equal(q8, 0) | equal(q8, 3);
wave_1_per_point4=    is3 = equal(q8, 1) | equal(q8, 4);
wave_1_per_point5=
wave_1_per_point6=    posx = .5;
wave_1_per_point7=    posy = is1*q1 + is2*q2 + is3*q3;
wave_1_per_point8=
wave_1_per_point9=    slopex = 0;
wave_1_per_point10=    slopey = is1*q4 + is2*q5 + is3*q6;
wave_1_per_point11=
wave_1_per_point12=    r = is1;
wave_1_per_point13=    g = is2;
wave_1_per_point14=    b = is3;
wave_1_per_point15=    a = 1;
wave_1_per_point16=
wave_1_per_point17=    x = posx + (sample-.5)*.06*slopex;
wave_1_per_point18=    y = posy + (sample-.5)*.06*slopey;
wavecode_2_enabled=1
wavecode_2_samples=500
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wave_2_per_point1=    // 3rd strand (see per frame code)
wave_2_per_point2=    is1 = equal(q8, 3) | equal(q8, 4);
wave_2_per_point3=    is2 = equal(q8, 1) | equal(q8, 2);
wave_2_per_point4=    is3 = equal(q8, 0) | equal(q8, 5);
wave_2_per_point5=
wave_2_per_point6=    posx = .5;
wave_2_per_point7=    posy = is1*q1 + is2*q2 + is3*q3;
wave_2_per_point8=
wave_2_per_point9=    slopex = 0;
wave_2_per_point10=    slopey = is1*q4 + is2*q5 + is3*q6;
wave_2_per_point11=
wave_2_per_point12=    r = is1;
wave_2_per_point13=    g = is2;
wave_2_per_point14=    b = is3;
wave_2_per_point15=    a = 1;
wave_2_per_point16=
wave_2_per_point17=    x = posx + (sample-.5)*.06*slopex;
wave_2_per_point18=    y = posy + (sample-.5)*.06*slopey;
warp_1=    shader_body {
warp_2=        ret = tex2D(sampler_pc_main, uv);
warp_3=        if (uv.x > 0.6) {
warp_4=            ret = 0;
warp_5=        }
warp_6=    }
comp_1=    sampler sampler_rand00;
comp_2=    sampler sampler_rand01;
comp_3=    sampler sampler_rand02;
comp_4=    shader_body {
comp_5=        ret = tex2D(sampler_main,uv);
comp_6=        if (ret.x >= ret.y && ret.x >= ret.z && ret.x > 0.005) {
comp_7=            ret.y = 0;
comp_8=            ret.z = 0;
comp_9=            ret = tex2D(sampler_rand00, mul(rot_d1, uv));
comp_10=        }
comp_11=        else if (ret.y >= ret.x && ret.y >= ret.z && ret.y > 0.005) {
comp_12=            ret.x = 0;
comp_13=            ret.z = 0;
comp_14=            ret = tex2D(sampler_rand01, mul(rot_d2, uv));
comp_15=        }
comp_16=        else if (ret.z >= ret.x && ret.z >= ret.y && ret.z > 0.005) {
comp_17=            ret.x = 0;
comp_18=            ret.y = 0;
comp_19=            ret = tex2D(sampler_rand02, mul(rot_d3, uv));
comp_20=            ret.z = 1;
comp_21=        }
comp_22=        else {
comp_23=            ret = mul(rot_d4, float3(0,0,.4));
comp_24=        }
comp_25=        //ret = tex2D(sampler_main, uv);
comp_26=    }
