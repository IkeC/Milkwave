MILKDROP_PRESET_VERSION=201
PSVERSION=2
PSVERSION_WARP=2
PSVERSION_COMP=2
[preset00]
fShader=0.000000
fGammaAdj=1.980000
warp=0
zoom=1
wave_a=0
wavecode_1_enabled=1
wavecode_1_samples=500
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_smoothing=0.500000
wave_1_init1=    reg00 = .5;
wave_1_init2=    reg01 = .8;
wave_1_init3=
wave_1_init4=    reg02 = .15;
wave_1_init5=    reg03 = 0;
per_frame_1=    dt = 1/fps;
per_frame_2=
per_frame_3=    // motion
per_frame_4=    reg00 = reg00 + reg02*dt;
per_frame_5=    reg01 = reg01 + reg03*dt;
per_frame_6=
per_frame_7=    reg03 = reg03 - .9*dt; // gravity
per_frame_8=
per_frame_9=    // collision with left side
per_frame_10=    is_left = below(reg00, 0)*below(reg02,0);
per_frame_11=    reg00  = is_left*(-reg00)  + (1-is_left)*reg00;
per_frame_12=    reg02 = is_left*(-reg02) + (1-is_left)*reg02;
per_frame_13=
per_frame_14=    // collision with right side
per_frame_15=    is_right = above(reg00, 1)*above(reg02,0);
per_frame_16=    reg00  = is_right*(2 - reg00) + (1-is_right)*reg00;
per_frame_17=    reg02 = is_right*(-reg02)   + (1-is_right)*reg02;
per_frame_18=
per_frame_19=    // collision with floor
per_frame_20=    is_below = below(reg01, 0)*below(reg03,0);
per_frame_21=    reg01  = is_below*(-reg01) + (1-is_below)*reg01;
per_frame_22=    reg03 = is_below*(-reg03) + (1-is_below)*reg03;
per_frame_23=
per_frame_24=    // collision with top
per_frame_25=    is_above = above(reg01, 1)*above(reg03,0);
per_frame_26=    reg01  = is_above*(2 - reg01)  + (1-is_above)*reg01;
per_frame_27=    reg03 = is_above*(-.1*reg03) + (1-is_above)*reg03;
per_frame_28=
per_frame_29=    // set up for wave processing
per_frame_30=    reg04=0;
per_frame_31=    reg05=0;
per_frame_32=
per_frame_33=    q1 = aspectx;
per_frame_34=    q2 = aspecty;
per_frame_35=    monitor = q2;
wave_1_per_point1=    theta = rand(100);
wave_1_per_point2=    bx = reg00+.001*rand(10)*cos(theta)/q2;
wave_1_per_point3=    by = reg01+.001*rand(10)*sin(theta)/q1;
wave_1_per_point4=
wave_1_per_point5=    // draw wave
wave_1_per_point6=    wx = sample/.9;
wave_1_per_point7=    wy = value1*.25 + .2;
wave_1_per_point8=
wave_1_per_point9=    // collision detection and handling
wave_1_per_point10=    has_ball = below(reg04, reg00)*(1-below(wx, reg00))*(1-is_ball);
wave_1_per_point11=
wave_1_per_point12=    norm_x = wy - reg05;
wave_1_per_point13=    norm_y = reg04 - wx;
wave_1_per_point14=    len_norm = sqrt(norm_x*norm_x + norm_y*norm_y);
wave_1_per_point15=    norm_x = -norm_x/len_norm;
wave_1_per_point16=    norm_y = norm_y/len_norm;
wave_1_per_point17=
wave_1_per_point18=    is_below = has_ball*below(reg01, wy);
wave_1_per_point19=    reg01  = (1-is_below)*reg01  + is_below*(wy + (wy - reg01));
wave_1_per_point20=    reg03 = (1-is_below)*reg03 + is_below*(wy*5);
wave_1_per_point21=    reg02 = (1-is_below)*reg02 + is_below*(.5*norm_x);
wave_1_per_point22=
wave_1_per_point23=    // drawing
wave_1_per_point24=
wave_1_per_point25=    is_ball = above(sample, .9);
wave_1_per_point26=    x = is_ball*bx + (1-is_ball)*wx;
wave_1_per_point27=    y = is_ball*by + (1-is_ball)*wy;
wave_1_per_point28=    y = .5 - (.5 - y)/q2;
wave_1_per_point29=    monitor = is_ball;
wave_1_per_point30=
wave_1_per_point31=
wave_1_per_point32=    reg04 = wx;
wave_1_per_point33=    reg05 = wy;
wavecode_2_enabled=1
wavecode_2_samples=500
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_smoothing=0.500000
wave_2_per_point1=    x=sample/.9;
wave_2_per_point2=    y=value1*.25 + .2;
wave_2_per_point3=    y = .5 - (.5 - y)/q2;
warp_1=    shader_body {
warp_2=        ret = tex2D(sampler_main, uv)*0.8;
warp_3=    }
