MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=4
[preset00]
fShader=0.000000
fDecay=1
fGammaAdj=1.980000
warp=0
zoom=1
wave_a=0
wavecode_0_enabled=0
wavecode_0_samples=100
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=1
warp_1=    shader_body {
warp_2=        ret = 0;
warp_3=    }
comp_1=    // adapted from https://www.scratchapixel.com/lessons/3d-basic-rendering/ray-tracing-rendering-a-triangle/moller-trumbore-ray-triangle-intersection.html
comp_2=    // returns (u',v',t,f) where (u,v) are the barycentric coordinates,
comp_3=    // t is the depth,
comp_4=    // and f is either
comp_5=    //   < 0 (back intersection),
comp_6=    //   = 0 (no intersection), or
comp_7=    //   > 0 (front intersection)
comp_8=    float4 intersection(float2 o, float3 v0, float3 v1, float3 v2) {
comp_9=        float3 orig = float3(o.x, o.y, 3);
comp_10=        float3 dir  = float3(0,0,1);
comp_11=
comp_12=        float3 v0v1 = v1 - v0;
comp_13=        float3 v0v2 = v2 - v0;
comp_14=        float3 tvec = orig - v0;
comp_15=
comp_16=        float3 pvec = cross(dir, v0v2);
comp_17=        float  det  = dot(v0v1, pvec);
comp_18=        if (abs(det) < 0.0001) {
comp_19=            return float4(0,0,0,0);
comp_20=        }
comp_21=        else {
comp_22=
comp_23=            float  invDet = 1/det;
comp_24=
comp_25=            float u = dot(tvec, pvec)*invDet;
comp_26=
comp_27=            float3 qvec   = cross(tvec, v0v1);
comp_28=            float v = dot(dir, qvec) * invDet;
comp_29=            float t = dot(v0v2, qvec)*invDet;
comp_30=            float w = 1 - u - v;
comp_31=
comp_32=            return float4(u, v, t, det);
comp_33=        }
comp_34=    }
comp_35=
comp_36=    shader_body {
comp_37=        float f = 1.618; // golden ratio
comp_38=        float g = 0.618; // 1/f, or f - 1
comp_39=
comp_40=        float4 corners[20] =
comp_41=            { float4(+1,+1,+1,1) // tetrahedron 1
comp_42=            , float4(+1,-1,-1,1)
comp_43=            , float4(-1,+1,-1,1)
comp_44=            , float4(-1,-1,+1,1)
comp_45=
comp_46=            , float4(-1,-1,-1,1) // tetrahedron 2
comp_47=            , float4( 0,+f,-g,1)
comp_48=            , float4(-g, 0,+f,1)
comp_49=            , float4(+f,-g, 0,1)
comp_50=
comp_51=            , float4(-1,+1,+1,1) // tetrahedron 3
comp_52=            , float4( 0,-f,+g,1)
comp_53=            , float4(-g, 0,-f,1)
comp_54=            , float4(+f,+g, 0,1)
comp_55=
comp_56=            , float4(+1,-1,+1,1) // tetrahedron 4
comp_57=            , float4( 0,+f,+g,1)
comp_58=            , float4(+g, 0,-f,1)
comp_59=            , float4(-f,-g, 0,1)
comp_60=
comp_61=            , float4(+1,+1,-1,1) // tetrahedron 5
comp_62=            , float4( 0,-f,-g,1)
comp_63=            , float4(+g, 0,+f,1)
comp_64=            , float4(-f,+g, 0,1)
comp_65=        };
comp_66=
comp_67=        float2 uv2 = (uv - float2(.5,.5))*aspect.wz*4; // normalized into [-1,1]
comp_68=
comp_69=        float depth = 10;
comp_70=
comp_71=        ret = float3(0.9,0.95,1);
comp_72=        for (int tet = 0; tet < 5; tet++) {
comp_73=            for (int face = 0; face < 4; face++) {
comp_74=                float4 v0 = corners[(4*tet) + ((face + 0)%4)];
comp_75=                float4 v1 = corners[(4*tet) + ((face + 1)%4)];
comp_76=                float4 v2 = corners[(4*tet) + ((face + 2)%4)];
comp_77=                float4 v3 = corners[(4*tet) + ((face + 3)%4)];
comp_78=                float4 i = intersection(uv2,
comp_79=                    mul(v0, rot_f1),
comp_80=                    mul(v1, rot_f1),
comp_81=                    mul(v2, rot_f1)
comp_82=                );
comp_83=
comp_84=                float3 bary = float3(i.xy, 1 - i.x - i.y);
comp_85=                if (bary.x < 0 || bary.x > 1 || bary.y < 0 || bary.y > 1 || bary.z < 0 || bary.z > 1) {
comp_86=
comp_87=                }
comp_88=                else if (bary.x > .08 && bary.y > .08 && bary.z > .08) {
comp_89=
comp_90=                }
comp_91=                else if (i.z > depth) {
comp_92=
comp_93=                }
comp_94=                else {
comp_95=                    depth = i.z;
comp_96=
comp_97=                    ret = v3.xyz/4 + 0.5*bary;
comp_98=                }
comp_99=            }
comp_100=        }
comp_101=    }
