MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=2
[preset00]
fRating=3.000
fGammaAdj=2.000
fDecay=0.980
fVideoEchoZoom=2.000
fVideoEchoAlpha=0.000
nVideoEchoOrientation=0
nWaveMode=7
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.070
fWaveScale=1.229
fWaveSmoothing=0.900
fWaveParam=0.200
fModWaveAlphaStart=0.000
fModWaveAlphaEnd=0.000
fWarpAnimSpeed=100.000
fWarpScale=0.010
fZoomExponent=1.14947
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00500
dy=0.00000
warp=0.00000
sx=0.99010
sy=0.99010
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=1.000
ob_g=1.000
ob_b=1.000
ob_a=0.000
ib_size=0.010
ib_r=1.000
ib_g=1.000
ib_b=1.000
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.850
mv_r=0.500
mv_g=0.500
mv_b=0.500
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
wavecode_0_enabled=1
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=0
wavecode_0_scaling=0.89152
wavecode_0_smoothing=1.00000
wavecode_0_r=1.000
wavecode_0_g=0.600
wavecode_0_b=0.000
wavecode_0_a=1.000
wave_0_per_frame1=trel = q1-.0;
wave_0_per_frame2=t1 = int(trel)/2;
wave_0_per_frame3=t2 = trel - int(trel);
wave_0_per_point1=k1 = (sample*512) % 8;
wave_0_per_point2=
wave_0_per_point3=t1 = equal (k1,0)*((t1 * 61 + 27) % 4096) 
wave_0_per_point4=   + (1-equal(k1,0))*t1;
wave_0_per_point5=
wave_0_per_point6=exc = 1+int(rand(5));
wave_0_per_point7=ampl = sample*sqrt(t2) * (1+exc);
wave_0_per_point8=
wave_0_per_point9=f1 = q4*ampl* sin(t1*6.28/4096);
wave_0_per_point10=f2 = q4*ampl* cos(t1*6.28/4096);
wave_0_per_point11=
wave_0_per_point12=x = q2 + k1* f1 ;
wave_0_per_point13=y = q3 + k1* f2;
wave_0_per_point14=
wave_0_per_point15=a = equal(k1,6) + equal (k1,0);
wave_0_per_point16=
wave_0_per_point17=r = 1;
wave_0_per_point18=b = equal (k1,0);
wave_0_per_point19=g = .6* (1+.6*equal (k1,0))  ;
wave_0_per_point20=a = a * q5 * (1-0*t2*t2);
wave_0_per_point21=//a = 0;
wave_0_per_point22= 
wavecode_1_enabled=1
wavecode_1_samples=512
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=0.01348
wavecode_1_smoothing=0.00000
wavecode_1_r=1.000
wavecode_1_g=0.600
wavecode_1_b=0.000
wavecode_1_a=0.310
wave_1_init1=t1 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;
wave_1_init2=t2 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;
wave_1_init3=t3 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;
wave_1_init4=t4 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;
wave_1_init5=t5 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;
wave_1_init6=t6 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;
wave_1_init7=t7 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;
wave_1_init8=t8 = 1 + (int(rand(101))*.01 - int(rand(101))*.01)*.3;
wave_1_init9=
wave_1_per_frame1=trel = q1-.33;
wave_1_per_frame2=t1 = int(trel)/3;
wave_1_per_frame3=t2 = trel - int(trel);
wave_1_per_frame4=
wave_1_per_frame5=
wave_1_per_frame6=
wave_1_per_point1=k1 = (sample*512) % 8;
wave_1_per_point2=
wave_1_per_point3=t1 = equal (k1,0)*((t1 * 61 + 27) % 4096) 
wave_1_per_point4=   + (1-equal(k1,0))*t1;
wave_1_per_point5=
wave_1_per_point6=ampl = sample*sqrt(t2);
wave_1_per_point7=
wave_1_per_point8=f1 = q4*ampl* sin(t1*6.28/4096);
wave_1_per_point9=f2 = q4*ampl* cos(t1*6.28/4096);
wave_1_per_point10=
wave_1_per_point11=x = q2 + k1* f1 ;
wave_1_per_point12=y = q3 + k1* f2;
wave_1_per_point13=
wave_1_per_point14=a = equal(k1,6) + equal (k1,0);
wave_1_per_point15=
wave_1_per_point16=r = 1;
wave_1_per_point17=b = equal (k1,0);
wave_1_per_point18=g = .6* (1+.6*equal (k1,0));
wave_1_per_point19=a = a * q5 * (1-0*t2*t2);
wave_1_per_point20=//a = 0;
wavecode_2_enabled=1
wavecode_2_samples=512
wavecode_2_sep=0
wavecode_2_bSpectrum=1
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=0
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=0.600
wavecode_2_b=0.000
wavecode_2_a=1.000
wave_2_per_frame1=trel = q1-.66;
wave_2_per_frame2=t1 = int(trel);
wave_2_per_frame3=t2 = trel - int(trel);
wave_2_per_point1=k1 = (sample*512) % 8;
wave_2_per_point2=
wave_2_per_point3=t1 = equal (k1,0)*((t1 * 61 + 27) % 4096) 
wave_2_per_point4=   + (1-equal(k1,0))*t1;
wave_2_per_point5=
wave_2_per_point6=ampl = sample*sqrt(t2);
wave_2_per_point7=
wave_2_per_point8=f1 = q4*ampl* sin(t1*6.28/4096);
wave_2_per_point9=f2 = q4*ampl* cos(t1*6.28/4096);
wave_2_per_point10=
wave_2_per_point11=x = q2 + k1* f1 ;
wave_2_per_point12=y = q3 + k1* f2;
wave_2_per_point13=
wave_2_per_point14=a = equal(k1,6) + equal (k1,0);
wave_2_per_point15=
wave_2_per_point16=r = 1;
wave_2_per_point17=b = equal (k1,0);
wave_2_per_point18=g = .6* (1+.6*equal (k1,0));
wave_2_per_point19=a = a * q5 * (1-0*t2*t2);
wave_2_per_point20=//a = 0;
per_frame_init_1=index = 0;
per_frame_init_2=loop (200000,
per_frame_init_3=  megabuf(index) = 0;
per_frame_init_4=  gmegabuf(index) = 0;
per_frame_init_5=  index = index + 1;
per_frame_init_6=);
per_frame_init_7=
per_frame_init_8=tstart = time;
per_frame_init_9=
per_frame_init_10=bd_recsz   = 8;
per_frame_init_11=bd_oct     = 4; //Oktaven
per_frame_init_12=bd_spo     = 30;//Res. pro Oktave
per_frame_init_13=bd_finc    = pow(2.0,1/bd_spo); //Freq. Incr. 
per_frame_init_14=bd_nres    = bd_oct * bd_spo;
per_frame_init_15=bd_minbpm  = 20;
per_frame_init_16=bd_maxbpm  = pow(2,bd_oct)*bd_minbpm;
per_frame_init_17=
per_frame_init_18=//mem spaces
per_frame_init_19=bd_dat0    = 100000;
per_frame_init_20=bd_tab0     = bd_dat0 + bd_nres * bd_recsz * 3;
per_frame_init_21=
per_frame_init_22=
per_frame_init_23=//Fill BPM Tab
per_frame_init_24=//n = bd_dat0;
per_frame_init_25=//BPM = bd_minbpm;
per_frame_init_26=//loop (bd_nres,gmegabuf (n) = BPM; BPM *=  bd_finc; n += bd_recsz;);
per_frame_init_27=
per_frame_init_28=
per_frame_init_29=//##### nur fuer Darstellung
per_frame_init_30=reg00 = bd_minbpm;
per_frame_init_31=reg01 = bd_maxbpm;
per_frame_init_32=reg02 = bd_recsz;
per_frame_init_33=reg03 = bd_nres;
per_frame_init_34=reg05 = bd_finc;
per_frame_init_35=
per_frame_init_36=reg06 = bd_dat0;
per_frame_init_37=reg07 = bd_mp0;
per_frame_init_38=
per_frame_init_39=time_st = 0;
per_frame_init_40=timediff = 1;
per_frame_init_41=
per_frame_init_42=n = 0; loop (20000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );
per_frame_init_43=
per_frame_init_44=num_rings= 28; reg00 = num_rings;
per_frame_init_45=
per_frame_init_46=ringsize = 100; reg01 = ringsize;
per_frame_init_47=size0 = 20;   reg02 = size0;
per_frame_init_48=
per_frame_init_49=ring = 0;
per_frame_init_50=loop (num_rings,
per_frame_init_51=  megabuf(ring*ringsize+ringsize-1) = ring+size0;
per_frame_init_52=ring +=1);
per_frame_init_53=
per_frame_init_54=//Storage
per_frame_init_55=//ringsize-1: Size
per_frame_init_56=//ringsize-2: slow mean
per_frame_init_57=//ringsize-3: fast mean
per_frame_init_58=//ringsize-4: Flip
per_frame_init_59=
per_frame_init_60=pi = 3.1416;
per_frame_1=q5 = 30/fps;
per_frame_2=
per_frame_3=//############## THIS IS A CONSTRUCTION SITE #########
per_frame_4=
per_frame_5=dt = min (1/fps,0.1) ; //Stability !
per_frame_6=dec_m = 1-dt*4; dec_s = 1 - dt; dec_xs = 1-dt/6;
per_frame_7=t0 = time - tstart;
per_frame_8=
per_frame_9=bd_b =  bass; bd_bass_ = bd_bass_*dec_m + (1-dec_m)*bd_b; bd_bass = bd_b-bd_bass_;
per_frame_10=bd_m =  mid ; bd_mid_  = bd_mid_ *dec_m + (1-dec_m)*bd_m; bd_mid =  bd_m -bd_mid_;
per_frame_11=bd_t =  treb; bd_treb_ = bd_treb_*dec_m + (1-dec_m)*bd_t; bd_treb = bd_t-bd_treb_;
per_frame_12=
per_frame_13=n = 0; BPM = bd_minbpm; 
per_frame_14=loop (bd_nres, 
per_frame_15=  gmegabuf(50000+n*bd_recsz) = 0; 
per_frame_16=  bd_arg = BPM/60*t0*6.283; 
per_frame_17=  gmegabuf (bd_tab0+n*bd_recsz) = BPM; 
per_frame_18=  BPM *= bd_finc;
per_frame_19=n+=1);
per_frame_20=
per_frame_21=bd_src=0;
per_frame_22=loop (3, bd_exc = bd_bass*(bd_src==0) + bd_mid*(bd_src==1) + bd_treb*(bd_src==2);
per_frame_23=  oct = 0;
per_frame_24=  loop (bd_oct,
per_frame_25=    bd_slot = 0;
per_frame_26=    bd_pk = 0; bd_mean = 0.0;
per_frame_27=    loop (bd_spo,
per_frame_28=      bd_tabptr = bd_tab0 +                 (oct*bd_spo+ bd_slot)*bd_recsz;
per_frame_29=      n        =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ bd_slot)*bd_recsz;
per_frame_30=      BPM = gmegabuf(bd_tabptr); bd_omega = BPM/60*6.283;
per_frame_31=      Feder = sqr(bd_omega); //Res.f = sqrt (Feder)/2pi (Hz)
per_frame_32=      gmegabuf (n+4) = gmegabuf(n+2); //alte pos
per_frame_33=      gmegabuf (n+1) *= 1-.5*dt * sqrt (BPM/300); //damping
per_frame_34=
per_frame_35=      EC_Steps = int (1 + BPM/50)*2;
per_frame_36=      loop (EC_Steps, // Euler-Cauchy steps
per_frame_37=        Kraft = bd_exc - Feder*gmegabuf(n + 2) ;
per_frame_38=        gmegabuf (n+1) += Kraft         * dt/EC_Steps;
per_frame_39=        gmegabuf (n+2) += gmegabuf(n+1) * dt/EC_Steps;  
per_frame_40=      );
per_frame_41=      beatcos = gmegabuf(n+1);  beatsin = gmegabuf(n+2)*bd_omega;
per_frame_42=      quad = sqrt (pow(beatsin,2) + pow(beatcos,2));
per_frame_43=      gmegabuf (n) = gmegabuf(n)*0.8 + 0.2*quad;
per_frame_44=      bd_ampl = gmegabuf(n);
per_frame_45=      bd_mean += bd_ampl;
per_frame_46=      if (bd_ampl > bd_pk, bd_pk=bd_ampl, 0);
per_frame_47=    bd_slot +=1;);
per_frame_48= // Komb. bass,mid,treb
per_frame_49=    bd_slot = 0;    
per_frame_50=    bd_qual = pow(bd_pk/bd_mean*bd_spo-1,1);
per_frame_51=    gmegabuf((bd_src*bd_oct+oct)*2) = bd_qual;
per_frame_52=    loop (bd_spo,
per_frame_53=      m =  50000 + (bd_slot + 0*oct*bd_spo)*bd_recsz;
per_frame_54=      n =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ bd_slot)*bd_recsz; //#2x berechnet
per_frame_55=      gmegabuf(m) += (bd_qual)*gmegabuf (n)/12;
per_frame_56=    bd_slot +=1;);
per_frame_57=  oct += 1;);
per_frame_58=bd_src +=1;);
per_frame_59=
per_frame_60=
per_frame_61=//Get maxind
per_frame_62=bd_slot = 0; maxind = 0; bd_pk = 0; bd_mean = 0;
per_frame_63=loop (bd_spo,
per_frame_64=   m =  50000 + bd_slot*bd_recsz;
per_frame_65=   gmegabuf(m) = pow(gmegabuf(m),1);
per_frame_66=   bd_mean += gmegabuf(m);
per_frame_67=   if (gmegabuf(m) > bd_pk, bd_pk = gmegabuf(m); maxind = bd_slot, 0);
per_frame_68=bd_slot += 1);
per_frame_69=quali = bd_pk/bd_mean*bd_spo-1;
per_frame_70=
per_frame_71=n = 0; loop (150, gmegabuf(50+n) *= 0; n+=1);
per_frame_72=
per_frame_73=//KREISE
per_frame_74=bd_src = 0; tsin = 0; tcos = 0;
per_frame_75=loop (3,
per_frame_76=  oct = 0;  
per_frame_77=  loop (bd_oct,
per_frame_78=    n         =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ maxind)*bd_recsz;
per_frame_79=    bd_tabptr = bd_tab0  +                 (oct*bd_spo+ maxind)*bd_recsz;
per_frame_80=    BPM = gmegabuf(bd_tabptr); 
per_frame_81=
per_frame_82=    im =  gmegabuf(n+1);
per_frame_83=    re =  gmegabuf(n+2) * BPM/60*6.283;
per_frame_84=    bd_cos =  cos (BPM/60*6.28*time);
per_frame_85=    bd_sin = -sin (BPM/60*6.28*time);
per_frame_86=
per_frame_87=//Winkel zurueckdrehen. Das sind nun die Winkel relativ zu cos(oct*time).
per_frame_88=    re0 =  re*bd_cos + im*bd_sin;
per_frame_89=    im0 = -re*bd_sin + im*bd_cos;
per_frame_90=    bd_qual = gmegabuf((bd_src*bd_oct+oct)*2);
per_frame_91=    gmegabuf (50+oct*4)   +=  bd_qual * (im0)*1;
per_frame_92=    gmegabuf (50+oct*4+1) +=  bd_qual * (re0)*1;
per_frame_93=    gmegabuf (50+oct*4+2) +=  bd_qual;
per_frame_94=
per_frame_95=//Summe der besten Beitraege. Das ist der Referenzwinkel.
per_frame_96=    gmegabuf (100+0)  +=  bd_qual * im0;
per_frame_97=    gmegabuf (100+1)  +=  bd_qual * re0;
per_frame_98=
per_frame_99=//Nun sollten wir die Differenzwinkel zur Ref berechnen. Und was damit ? Dann kann ich die
per_frame_100=//Einzelwinkel auf Ref bringen - bringt doch nichts !
per_frame_101=//Ich kann alle auf Null drehen, daraus sinusse erzeuge und addieren ->besserer Takt ?
per_frame_102=    re =  (bd_cos*re0 + bd_sin*im0);
per_frame_103=    im =  (-bd_cos*im0 + bd_sin*re0);
per_frame_104=tsin += im*5;
per_frame_105=//rsin == re*5;
per_frame_106=
per_frame_107=  oct += 1);
per_frame_108=bd_src +=1);
per_frame_109=q27 = 10*bd_pk;
per_frame_110=q30 = tsin;
per_frame_111=
per_frame_112=q23 = quali;
per_frame_113=
per_frame_114=q24 = bd_ampl*10;
per_frame_115=
per_frame_116=volAmpl = volAmpl*(1 - .0225) + 10*bd_ampl*.0225;
per_frame_117=q25 = volAmpl;
per_frame_118=
per_frame_119=q22 = .98*pow(q23*q25, .02);
per_frame_120=
per_frame_121=vol = bass_att + mid_att + treb_att;
per_frame_122=vol_ = vol_*0.95 + 0.05*vol;
per_frame_123=q29 = vol-vol_;
per_frame_124=
per_frame_125=//Welche Oktave ???
per_frame_126=bd_src = 0; maxo = 0; maxs = 0; maxa = 0;
per_frame_127=loop (3,
per_frame_128=  oct = 1;  
per_frame_129=  loop (bd_oct-1,
per_frame_130=    n =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ maxind)*bd_recsz;
per_frame_131=    bd_qual = gmegabuf((bd_src*bd_oct+oct)*2);
per_frame_132=
per_frame_133=    ampl = bd_qual / (1+oct*(maxind/bd_oct)*0);
per_frame_134=    if (ampl>maxa, maxa = ampl; maxs = bd_src; maxo = oct;, 0);
per_frame_135=  oct += 1);
per_frame_136=bd_src +=1);
per_frame_137=
per_frame_138=q31 = bd_qual;
per_frame_139=//q31 = q28;
per_frame_140=q32 = 4/bd_qual;
per_frame_141=//if(above(q28,50),q28 = pow(5*sin(.5*bd_qual), 2), 0);
per_frame_142=
per_frame_143=//Beat-Flash
per_frame_144=testi = bd_nres*maxs +bd_spo*maxo + maxind;
per_frame_145=if (bor (beat && (prog==0), abs(testi-test0)<2),test0 = testi,0);
per_frame_146=n =  bd_dat0 + (test0)*bd_recsz;
per_frame_147=creep = gmegabuf(n+1);
per_frame_148=beat_foo =  (creep>0) * (creepo <0);
per_frame_149=//beatct = if (change, 0, beatct+beat);
per_frame_150=//prog = (prog+beat)%8;
per_frame_151=creepo = creep;
per_frame_152=show = if (beat, 1, show*0.5);
per_frame_153=q4 = (gmegabuf(n+1)/gmegabuf(n)*1000);
per_frame_154=
per_frame_155=
per_frame_156=if(beat_foo, timediff_h = time - time_st_h; time_st_h = time, timediff_h = timediff_h); 
per_frame_157=if(above(timediff_h, 100), timediff_h = 1, timediff_h = timediff_h);
per_frame_158=q1 = timediff;
per_frame_159=avgtime_h = avgtime_h*(1 - .025*sqrt(q5)) + q1*.025;
per_frame_160=q2 = avgtime_h;
per_frame_161=
per_frame_162=
per_frame_163=finsComp_pf = finsComp; 
per_frame_164=if((finsComp == floor((n - 100000)*.004)), 
per_frame_165=    finTime_st = time; finTime = time - finTime_st; finsComp = floor((n - 100000)*.004),
per_frame_166=    if(finTime < 2.5, 
per_frame_167=        finsComp_pf = finsComp; finTime = time - finTime_st, 
per_frame_168=        finsComp = floor((n - 100000)*.004); finTime_st = time));
per_frame_169=if(above(finTime, 300), finTime_st = time, 0);
per_frame_170=q26 = floor(finsComp_pf);
per_frame_171=
per_frame_172=
per_frame_173=dt = min (time-otime,0.1) ; //Stability !
per_frame_174=otime = time;
per_frame_175=dec_f = 0.8; dec_m = 1 - 4*dt; dec_s = 1 - dt;dec_xs = 1 - dt/4;
per_frame_176=vol = (bass_att + mid_att + treb_att);
per_frame_177=avg = avg*dec_m + (1-dec_m)*vol;
per_frame_178=
per_frame_179=exc = atan(vol-avg)/3;
per_frame_180=exc_ = exc*0.8 + 0.2*exc*2;
per_frame_181=
per_frame_182=//exc = sin(time*6.283)*0.1;
per_frame_183=
per_frame_184=ring = 0; maxind = 0; maxv = 0; sum=0;
per_frame_185=
per_frame_186=loop (num_rings,
per_frame_187=  n = ring * ringsize;
per_frame_188=  size = megabuf(n+ringsize-1);; 
per_frame_189=  excite = exc*(size)/size0;
per_frame_190=  memcpy (n+1,n,ringsize-5); //!!!wichtig
per_frame_191=  megabuf (n) = megabuf(n+size)*(1-0.003*size) + excite;
per_frame_192=  sig = megabuf(n);
per_frame_193=
per_frame_194=  dec = 1-0.4/size; //slow
per_frame_195=  m = n+ringsize-2;
per_frame_196=  megabuf (m) = dec*megabuf(m) + (1-dec)* pow(sig,2);
per_frame_197=  mean = sqrt(megabuf(m));
per_frame_198=  gmegabuf(5000+ring) = mean; 
per_frame_199=  if (mean > maxv , maxv = mean; maxind = ring, 0);
per_frame_200=
per_frame_201=  dec = 1-2/size; //fast
per_frame_202=  m = n+ringsize-3;
per_frame_203=  megabuf (m) = dec*megabuf(m) + (1-dec)* pow(sig,2);
per_frame_204=  mean = sqrt(megabuf(m)); //fast
per_frame_205=  gmegabuf(6000+ring) = mean; 
per_frame_206=
per_frame_207=  sig2 = (megabuf(n+size)+megabuf(n)+megabuf(n+1) )/3;
per_frame_208=  if (sig > 1.2*mean, trip=1, trip=0);
per_frame_209=  m = n+ringsize-4;
per_frame_210=  megabuf (m) = trip;
per_frame_211= ring += 1;
per_frame_212=);
per_frame_213=
per_frame_214=beat = megabuf(maxind*ringsize+ringsize-4);
per_frame_215=//t0 = if (beat, time, t0);
per_frame_216=//q8 = bor (beat, time-t0<0.1);
per_frame_217=//if (beat, t0=time, 0);
per_frame_218=q21 = mean;
per_frame_219=q17 = pow(mean/(q25), .35);
per_frame_220=
per_frame_221=n = 0;
per_frame_222=loop (num_rings*ringsize,
per_frame_223=  gmegabuf (n) = megabuf(n);
per_frame_224=n += 1);
per_frame_225=
per_frame_226=if(beat, timediff = time - time_st; time_st = time, timediff = timediff); 
per_frame_227=if(above(timediff, 100), timediff = 1, timediff = timediff);
per_frame_228=q8 = timediff;
per_frame_229=//q2 = pow(.3, q8);
per_frame_230=avgtime = avgtime*(1 - .025*sqrt(q5)) + q8*.025;
per_frame_231=q9 = avgtime;
per_frame_232=
per_frame_233=
per_frame_234=//Selbst bei Barbie Girl fehlt manchmal der Rhythmus in Band 2,
per_frame_235=//obwohl das der gefuehlte Takt ist - >Problem mit Phasenkorrektur !
per_frame_236=//stehen Phasen bei doppelter Frequenz in Relation ? NEIN.
per_frame_237=
per_frame_238=
per_frame_239=
per_frame_240=
per_frame_241=
per_frame_242=//Problem: Fats Domino (1992) hat 55BPM -> Problem mit 110
per_frame_243=//Problem: 1991 London Beat I been thinking about you - geht nicht - solved
per_frame_244=//Problem: U96 - Love religion (1995) beginnt mit BPM < 20
per_frame_245=//Porblem: adiemus (1995)
per_frame_246=//Konflikt-Beat siehe Michale jackson b&W (1991)
per_frame_247=
per_frame_248=
per_frame_249=//q24 = bd_maxbpm;
per_frame_250=q18 = pixelsx;
per_frame_251=
per_frame_252=
per_frame_253=
per_frame_254=old_bass_flop=bass_flop;
per_frame_255=old_treb_flop=treb_flop;
per_frame_256=old_mid_flop=mid_flop;
per_frame_257=chaos=.9+.1*sin(pulse);
per_frame_258=entropy=if(equal(pulse,-20),1+bass_flop+treb_flop+mid_flop+q4*.002,entropy);
per_frame_259=bass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.6)*chaos+1.6);
per_frame_260=bass_flop=abs(bass_flop-equal(bass_thresh,2));
per_frame_261=treb_thresh=above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.6)*chaos+1.6);
per_frame_262=treb_flop=abs(treb_flop-equal(treb_thresh,2));
per_frame_263=mid_thresh=above(mid_att,mid_thresh)*2 + (1-above(mid_att,mid_thresh))*((mid_thresh-1.6)*chaos+1.6);
per_frame_264=mid_flop=abs(mid_flop-equal(mid_thresh,2));
per_frame_265=bass_changed=bnot(equal(old_bass_flop,bass_flop));
per_frame_266=mid_changed=bnot(equal(old_mid_flop,mid_flop));
per_frame_267=treb_changed=bnot(equal(old_treb_flop,treb_flop));
per_frame_268=bass_residual = bass_changed*sin(pulse*1.5) + bnot(bass_changed)*bass_residual;
per_frame_269=treb_residual = treb_changed*sin(pulse*1.5) + bnot(treb_changed)*treb_residual;
per_frame_270=mid_residual = mid_changed*sin(pulse*1.5) + bnot(mid_changed)*mid_residual;
per_frame_271=pulse=if(above(abs(pulse),20),-20,pulse+(bass_thresh+mid_thresh+treb_thresh)*.018);
per_frame_272=q11=mid_residual;
per_frame_273=q12=bass_residual;
per_frame_274=q13=treb_residual;
per_frame_275=q14=sin(pulse);
per_frame_276=q15=cos(pulse*(.5+.1*entropy));
per_frame_277=q16=sin(pulse*(.5+pow(.25,entropy)));
per_frame_278=if(above(mid + treb, bass*2), ib_r = .55 - abs(.6*sin( - 3*sqrt(q3 + q29)*bass_att*bass_att)), ib_r = .55 + abs(.55*sin( - 3*sqrt(q3 + q29)*bass_att*bass_att)));
per_frame_279=if(above(bass + treb, mid*2), ib_g = .55 - abs(.6*sin( - sqrt(q23)*mid*mid)), ib_g = .5 + abs(.55*sin( - sqrt(q23)*mid*mid)));
per_frame_280=if(above(mid + bass, treb*2), ib_b = .55 - abs(.6*sin( - sqrt(q29)*treb_att*treb_att)), ib_b = .55 + abs(.55*sin( - sqrt(q29)*treb_att*treb_att)));
per_frame_281=ob_r = .5 - .55*sin( - 3*sqrt(q3 + q29)*bass*_attbass_att);
per_frame_282=ob_g = .5 - .55*sin( - sqrt(q23)*mid*mid);
per_frame_283=ob_b = .5 - .55*sin( - sqrt(q29)*treb_att*treb_att);
per_frame_284=ib_size=.03+.02*q12;
per_frame_285=ob_size=.02+.015*sin(time*2.321+q12*.2);
per_frame_286=ob_a=.9+.1*q13;
per_frame_287=ib_a=.9+.1*sin(q12*.3+q14+q11*.5);
per_frame_288=rot=0;
per_frame_289=
per_frame_290=
per_frame_291=q10 = -.1*sqrt(q9*q2)*sign(q12);
per_frame_292=
per_frame_293=
per_frame_294=vol2 = pow(bass+mid+treb,2);
per_frame_295=basssum = vol2;
per_frame_296=
per_frame_297=stickybit = time%2;
per_frame_298=
per_frame_299=//avg vol
per_frame_300=//buffer 1
per_frame_301=volAvg = volAvg + vol2*equal(stickybit,1);
per_frame_302=//number of samples 1 or framerate
per_frame_303=sample1 = sample1 + equal(stickybit,1);
per_frame_304=//buffer 2
per_frame_305=volAvg2 = volAvg2 + vol2*equal(stickybit,0);
per_frame_306=//number of samples 2
per_frame_307=sample2 = sample2 + equal(stickybit,0);
per_frame_308=
per_frame_309=//transision
per_frame_310=edge = bnot(equal(bit2,stickybit));
per_frame_311=
per_frame_312=volAvg = volAvg - volAvg*edge*stickybit;
per_frame_313=volAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);
per_frame_314=
per_frame_315=sample1 = sample1  - sample1*edge*stickybit;
per_frame_316=sample2 = sample2  - sample2*edge*equal(stickybit,0);
per_frame_317=
per_frame_318=//test vol against avg buffer lvl
per_frame_319=diff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);
per_frame_320=diff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);
per_frame_321=
per_frame_322=q3 = diff;
per_frame_323=
per_frame_324=pv_beat = 0.1*(pow(q3, .75) + q29)/sqrt(.3*q27);
per_frame_325=q6 = pv_beat;
per_frame_326=
per_frame_327=bit2 = time%2;
per_frame_328=
per_frame_329=difftime = difftime + diff*0.03;
per_frame_330=//q2 = difftime;
per_frame_331=
per_frame_332=warp = (bass*bass + mid*mid + treb*treb)*.001;
per_frame_333=
per_frame_334=
per_frame_335=
per_frame_336=//monitor = sqrt(q23 - .5*q27);
per_frame_337=monitor = q10;
per_pixel_1=    rot=if(above(q15,.1),pow(rad, pow((q2), .1))*.1*q12*pow(q3, .75), cos(-1.5708 + 1.5708*pow(rad, pow(q2, .1))*q12)*.1*q12*pow(q3, .75));
per_pixel_2=    zoom=if(above(q12,0),zoom+(1-zoom)*rot*cos(pow(rad, pow(q9, .1))*q12*.25*q29),if(above(q13,0)*above(x,.5*pow(q9, .175)),zoom+(1-zoom)*sin(q13*rot*.25*q29),zoom+(1-zoom)*cos(pow(rad, pow(q9, .1))*q11*.25*q29)));
per_pixel_3=    dx=above(q11,0)*sin(pow(rad, pow(1/q21, .15))*.5*q12);
per_pixel_4=    dy=above(q11,0)*sin(pow(rad, pow(1/q21, .15))*.5*q13);
warp_1=`sampler sampler_sampler_pw_noise_lq;
warp_2=`float hole;
warp_3=`float2 dz,uv1,uv2,uv3,uv4,uv6, mod;
warp_4=`float3 blur, blur2, noise2, noise3;
warp_5=`static float2 eyepos = float2(.1,-.1);
warp_6=`static float eyerad = .02;
warp_7=`static float mouth_y = q3;
warp_8=`static float direct = 1;
warp_9=`static float crumple = q1;
warp_10=`static float mwidth = q2;
warp_11=`static float mopen = q16;
warp_12=`static float mshape= q4;
warp_13=`static float dist = q11;
warp_14=`shader_body {
warp_15=`
warp_16=`float3 blur = lum(GetBlur1(frac(uv)))*crumple;
warp_17=`float2 hor = float2 (texsize.z,0)*8*blur;
warp_18=`float2 ver = float2 (0,texsize.w)*8*blur;
warp_19=`float dx = lum(tex2D(sampler_main,uv+hor) - tex2D(sampler_main,uv-hor));
warp_20=`float dy = lum(tex2D(sampler_main,uv+ver) - tex2D(sampler_main,uv-ver));
warp_21=`float2 dz = float2 (dx + (uv.x-.5)*.0,dy+.0);
warp_22=`
warp_23=`uv1 = float2 (abs(uv.x-.5),uv.y-.5);
warp_24=`//uv1 = float2(8*uv1.x*uv1.x,uv1.y*uv1.y*8);
warp_25=`
warp_26=`float teeth = sin((uv1.x)*142+1.5*sign(uv1.y-mouth_y))-mopen*.008/abs(uv1.y-mouth_y);
warp_27=`
warp_28=`float eyes = saturate(eyerad/length(uv1-eyepos));
warp_29=`eyes = pow(eyes,4);
warp_30=`float mouth = saturate(.05/sqrt(uv1.x*uv1.x*mwidth + (.05/(.01+mshape*uv1.x))*(1+q15)/mopen*pow(uv1.y-mouth_y,2)));
warp_31=`mouth = pow(mouth,3);
warp_32=`mod = eyes + mouth*mopen;
warp_33=`hole = pow(max(eyes,mouth),1);
warp_34=`
warp_35=`float3 eyeball = saturate(cos(1.4/eyerad*length(uv1-eyepos)))/3*(2-direct)*roam_sin*2;
warp_36=`eyeball = eyeball - (length(uv1-eyepos-.02*float2(q9*0,q10-eyepos.y)) < .01*q15);
warp_37=`
warp_38=`noise3 = lum(tex2D(sampler_noise_lq,uv1))+.5;
warp_39=`uv1 += mod/4;
warp_40=`teeth *= (mouth);
warp_41=`
warp_42=`float2 ang2= tex2D (sampler_noise_hq,uv1/4+time/180).xy;
warp_43=`//uv6 = mul(uv1,float2x2(ang2.y,-ang2.x,ang2.x,ang2.y));
warp_44=`uv6 = uv1 + .5*(uv1*4*ang2);
warp_45=`float mus = cos(uv6.y*18)+(sin(uv6.x*18));
warp_46=`noise2 = abs(mus)/6*(1+abs(crumple/16))+.2;
warp_47=`noise2 *= float3 (1,.9,.8);
warp_48=`noise2 = lerp(noise2,teeth,mouth);
warp_49=`noise2 = lerp(noise2,eyeball,eyes);
warp_50=`blur2 = GetBlur2(frac(noise3));
warp_51=`
warp_52=`float3 crisp = GetPixel(frac(uv+dz*.003));
warp_53=`//crisp = max(crisp, .8*float3(1,1,1)*GetPixel(uv*1+.3)*saturate(1-2*lum(GetPixel(uv+.31))));
warp_54=`crisp += -0.0*blur2 - length(dz)*.1;
warp_55=`
warp_56=`
warp_57=`ret = crisp * (.99-hole/2*direct) -  .01 + noise2*(.045+hole*direct)  ;
warp_58=`//ret = hole;
warp_59=`//ret = 1-eyes;
warp_60=`//ret = tex2D (sampler_shub1,uv1);
warp_61=`}
comp_1=`shader_body
comp_2=`{
comp_3=` 
comp_4=`ret = GetBlur3(uv);
comp_5=`
comp_6=`float2 uv2 = uv*(1-.2*GetBlur3(saturate(ret.xy))-.05*GetBlur1(saturate(ret.xy)));
comp_7=`uv2 += .1*GetBlur3(saturate(ret.xy))+.025*GetBlur1(saturate(ret.xy));
comp_8=`
comp_9=`uv = lerp(uv,uv2,.75);
comp_10=`
comp_11=`ret = lerp(float3(1,1,.65),float3(1,.25,1),GetPixel(uv)-.5*GetBlur1(uv));
comp_12=`ret = lerp(ret,float3(.4,.4,.9),1.5*GetBlur2(uv)-1.2*GetPixel(uv));
comp_13=`ret = lerp(ret,float3(.4,.4,0),1.25*GetBlur3(uv)-1.2*GetBlur2(uv));
comp_14=`
comp_15=`ret = 1-saturate(ret);
comp_16=`
comp_17=`//ret *= pow(hue_shader,3);
comp_18=`//    ret = pow(ret,float3(.3,.55,1.8)); //gamma
comp_19=`//    ret *= ret; //darken
comp_20=`}
