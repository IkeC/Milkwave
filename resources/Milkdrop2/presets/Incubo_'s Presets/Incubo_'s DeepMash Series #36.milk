MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=1.000
fGammaAdj=1.000
fDecay=0.960
fVideoEchoZoom=1.007
fVideoEchoAlpha=0.000
nVideoEchoOrientation=1
nWaveMode=5
bAdditiveWaves=0
bWaveDots=1
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=2.190
fWaveScale=1.000
fWaveSmoothing=0.000
fWaveParam=0.000
fModWaveAlphaStart=0.500
fModWaveAlphaEnd=1.000
fWarpAnimSpeed=0.010
fWarpScale=100.000
fZoomExponent=0.19913
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01359
sx=1.00000
sy=1.00000
wave_r=0.500
wave_g=0.500
wave_b=0.500
wave_x=0.500
wave_y=0.500
ob_size=0.500
ob_r=0.000
ob_g=0.000
ob_b=0.000
ob_a=0.000
ib_size=0.500
ib_r=1.000
ib_g=1.000
ib_b=1.000
ib_a=0.000
nMotionVectorsX=0.000
nMotionVectorsY=0.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.000
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.250
per_frame_1=db = .5*db + .5* bass_att;
per_frame_2=bb = bb + .1 *db ;
per_frame_3=dt = .5*dt + .5* treb_att;
per_frame_4=tt = tt+ .1 * dt ;
per_frame_5=dm = .5*dm + .5* mid_att;
per_frame_6=mm = mm+ .1 * dm ;
per_frame_7=
per_frame_8=q1 = tt;
per_frame_9=q2 = bb;
per_frame_10=q3 = mm;
per_pixel_1=vx = 0.5+cos(time*0.2)*1;
per_pixel_2=vy = 0.5+sin(time*0.2)*1;
per_pixel_3=vz = 0;
per_pixel_4=z = 0 - vz;
per_pixel_5=x = x - vx;
per_pixel_6=y = y - vy;
per_pixel_7=
per_pixel_8=d = time*0.1+.05*(q1+q2+q3);
per_pixel_9=xx = sin(d)*x + cos(d)*y;
per_pixel_10=yy = cos(d)*x - sin(d)*y;
per_pixel_11=
per_pixel_12=x = xx;
per_pixel_13=y = yy;
per_pixel_14=
per_pixel_15=
per_pixel_16=x = x + mx +.01*(q1-q2);
per_pixel_17=y = y + my +.01*(q2-q1);
per_pixel_18=z = z + vz + .01*(q3/time);
per_pixel_19=cx = 0;
per_pixel_20=cy = 0;
per_pixel_21=cz = 0.5+treb*0.0;
per_pixel_22=vx = 0;
per_pixel_23=vy = 0;
per_pixel_24=vz = 0;
per_pixel_25=zoom = 0.33;
per_pixel_26=w = 1/zoom*(1+sqrt(sqr(z-cz) + sqr(x-cx)+sqr(y-cy)));
per_pixel_27=dx = -(x-mx)*w;// + w*(y-my);
per_pixel_28=dy = -(y-my)*w ;// - w*(x-mx);
warp_1=`sampler sampler_worms;
warp_2=`float3 color, mus;
warp_3=`float2 uv1,uv6;
warp_4=`float dx,dy;
warp_5=`
warp_6=`shader_body {
warp_7=`uv1 = (uv-.5) * aspect.xy;
warp_8=`
warp_9=`
warp_10=`float rota = lum(tex2D (sampler_noise_hq,q30*uv+.001*time))*3.14;
warp_11=`
warp_12=`
warp_13=`uv6 = mul(uv1,float2x2(cos(rota),-sin(rota),sin(rota),cos(rota)));
warp_14=`
warp_15=`
warp_16=`mus = .2/(sqrt(uv6.y)+.2);
warp_17=`mus = abs(mus);
warp_18=`mus *= float3 (1,.96,.9);
warp_19=`
warp_20=`float3 no = tex2D (sampler_noise_lq,uv)-.5;
warp_21=`mus *= float3 (1,.96,.9) + 0.1*no;
warp_22=`
warp_23=`color =  1;
warp_24=`
warp_25=`float3 blur = GetBlur1(frac(uv));
warp_26=`
warp_27=`float2 hor = float2 (0.004,0);
warp_28=`float2 ver = float2 (0,.004);
warp_29=`
warp_30=`dx = lum(tex2D(sampler_main,uv+hor) 
warp_31=`         - tex2D(sampler_main,uv-hor));
warp_32=`dy = lum(tex2D(sampler_main,uv+ver) 
warp_33=`         - tex2D(sampler_main,uv-ver));
warp_34=`
warp_35=`float2 zz = float2 (dx,dy);
warp_36=`
warp_37=`float3 crisp= tex2D(sampler_main,uv+zz*.02);
warp_38=`float3 crisp2 = .5*tex2D(sampler_main,uv);
warp_39=`crisp += crisp2;
warp_40=`crisp *= .667;
warp_41=`crisp +=.018*color - length(zz)*blur;
warp_42=`
warp_43=`float3 ret1 = crisp - blur*.03 + .04*mus;
warp_44=`//ret1 -= abs(mus)/52;
warp_45=`ret = ret1 * .99 -  .04 ;
warp_46=`}
comp_1=`sampler sampler_facade01;
comp_2=`
comp_3=`float3 ret1, neu, musl, musr, screen3, pos0, pos1;
comp_4=`float2 pq, pq2;
comp_5=`int mask1, mask2;
comp_6=`float n, dist2;
comp_7=`static const float width =5;
comp_8=`static const float depth =28;
comp_9=`static float3 sxy = float3(q4,q5,q6);
comp_10=`static float3 sxz = float3(q7,q8,q9);
comp_11=`static float3 t = -cross(sxy,sxz);
comp_12=`static float blend = q32;
comp_13=`
comp_14=`
comp_15=`float2 project (float3 s, float3 pos) {
comp_16=`  float Nenner;  float2x3 ts;
comp_17=`  ts = float2x3(t,-s);
comp_18=`  Nenner = mul(cross(t,s),screen3);
comp_19=`  dist2 = Nenner;
comp_20=`  return (mul(ts,cross(pos,screen3))/Nenner);}
comp_21=`
comp_22=`float2 project_gnd (float3 pos) {
comp_23=`  float Nenner;  float2x3 ts;
comp_24=`  ts = float2x3(sxz,-sxy);//auch -t probieren ###
comp_25=`  Nenner = mul(cross(sxz,sxy),screen3);
comp_26=`  return (mul(ts,cross(pos,screen3/48))/Nenner);}
comp_27=`
comp_28=`float3 wall (float2 xy) {
comp_29=`  return(-.2+tex2D (sampler_facade01,xy/4).brg);
comp_30=`}
comp_31=`
comp_32=`shader_body {
comp_33=`screen3 = float3 ((uv-.5)*aspect.xy,1);//wirkt wie zoom
comp_34=`neu = GetBlur1(uv)/4;
comp_35=`
comp_36=`  pq  = project (sxy, float3 (q10,q11,q12)); 
comp_37=`  pq2 = project (sxz, float3 (q10,q11,q12)); 
comp_38=`  mask1 = (pq.x>=0)* (pq.x <=width);
comp_39=`  mask2 = (pq2.x>=0)*(pq2.x <= depth);
comp_40=`  if (mask1) {neu = lerp(neu,wall(pq),blend);}
comp_41=`  if (mask2) {neu = lerp(neu,wall(pq2),blend);}
comp_42=`
comp_43=`  pq  = project (-sxy, float3 (q13,q14,q15)); 
comp_44=`  pq2 = project (sxz, float3 (q13,q14,q15)); 
comp_45=`  mask1 = (pq.x>=0)* (pq.x <=width);
comp_46=`  mask2 = (pq2.x>=0)*(pq2.x <= depth);
comp_47=`  if (mask1) {neu = lerp(neu,wall(pq),blend);}
comp_48=`  if (mask2) {neu = lerp(neu,wall(pq2),blend);}
comp_49=`
comp_50=`  pq  = project (sxy, float3 (q16,q17,q18)); 
comp_51=`  pq2 = project (sxz, float3 (q16,q17,q18)); 
comp_52=`  mask1 = (pq.x>=0)* (pq.x <=width) * (dist2 >=0);
comp_53=`  mask2 = (pq2.x>=0)*(pq2.x <= depth)* (dist2 >=0);
comp_54=`  if (mask1) {neu = wall(pq);}
comp_55=`  if (mask2) {neu = wall(pq2);}
comp_56=`  musr = (q29%2)/length(abs(frac(pq2/2)-.5))*mask2;
comp_57=`  musr += (q29%2)/length(abs(frac(pq/2)-.5))*mask1;
comp_58=`
comp_59=`  pq  = project (-sxy, float3 (q19,q20,q21)); 
comp_60=`  pq2 = project (sxz, float3 (q19,q20,q21)); 
comp_61=`  mask1 = (pq.x>=0)* (pq.x <=width) * (dist2 <=0);
comp_62=`  mask2 = (pq2.x>=0)*(pq2.x <= depth)* (dist2 <=0);
comp_63=`  if (mask1) {neu = wall(pq);}
comp_64=`  if (mask2) {neu = wall(pq2);}
comp_65=`  musl = ((q29+1)%2)/length(abs(frac(pq2/2)-.5))*mask2;
comp_66=`  musl += ((q29+1)%2)/length(abs(frac(pq/2)-.5))*mask1;
comp_67=`
comp_68=`ret = tex2D (sampler_main,uv+neu/8)
comp_69=`+neu*(1+roam_cos)*saturate(bass_att*.04/length(uv-.5))/2
comp_70=`*(bass_att) + saturate((musl*roam_sin+musr*roam_cos)/16)*mid_att;
comp_71=`
comp_72=`}
