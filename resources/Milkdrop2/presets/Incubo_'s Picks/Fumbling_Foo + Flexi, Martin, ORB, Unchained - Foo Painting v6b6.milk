MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=4
[preset00]
fRating=5.000
fGammaAdj=2.000
fDecay=1.000
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=0
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=0
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=1
fWaveAlpha=0.001
fWaveScale=1.000
fWaveSmoothing=0.750
fWaveParam=0.000
fModWaveAlphaStart=0.750
fModWaveAlphaEnd=0.950
fWarpAnimSpeed=100.000
fWarpScale=0.010
fZoomExponent=1.14947
fShader=0.000
zoom=1.00000
rot=0.00000
cx=0.500
cy=0.500
dx=0.00500
dy=0.00000
warp=0.00000
sx=0.99010
sy=0.99010
wave_r=0.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=1.000
ob_g=1.000
ob_b=1.000
ob_a=0.000
ib_size=0.010
ib_r=1.000
ib_g=1.000
ib_b=1.000
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.330
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=0
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=0
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.00000
wavecode_0_smoothing=0.50000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=1.000
wavecode_0_a=0.420
wavecode_1_enabled=1
wavecode_1_samples=256
wavecode_1_sep=0
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=0
wavecode_1_bDrawThick=1
wavecode_1_bAdditive=0
wavecode_1_scaling=1.00000
wavecode_1_smoothing=0.50000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_frame1=samples = 256*1800/q18;
wave_1_per_point1=//init
wave_1_per_point2=zs = if(below(zs,-9.42478),0,zs);
wave_1_per_point3=
wave_1_per_point4=zs = if(above(zs, 9.42478),0, zs);
wave_1_per_point5=
wave_1_per_point6=speed = .002*asin(1)*floor(sqrt(q3)*pow(.4*q27, .3*q5))*(asin(1)*atan(bass*bass) + asin(1)*atan(mid*mid) + asin(1)*atan(treb*treb)); 
wave_1_per_point7=
wave_1_per_point8=//sum
wave_1_per_point9=zs += speed; 
wave_1_per_point10=
wave_1_per_point11=//project position and radius and pattern speed & beat detection
wave_1_per_point12=x = 0.5 + (0.02*pow(q24, .85) + sin(((q4*.004*asin(1))))*pow(q3*.5, .35)*.1)*cos(zs*asin(1)*100);
wave_1_per_point13=y = 0.5 + (0.02*pow(q24, .85) + sin(((q4*.004*asin(1))))*pow(q3*.5, .35)*.1)*sin(zs*asin(1)*100);
wave_1_per_point14=
wave_1_per_point15=
wave_1_per_point16=// color waveform to bass / mid / treble
wave_1_per_point17=r = .5 - .55*sin( - 3.1416*sqrt(q29 + q3)*bass);
wave_1_per_point18=g = .5 - .55*sin( - 3.1416*sqrt(q23)*mid);
wave_1_per_point19=b = .5 - .55*sin( - 3.1416*sqrt(q29)*treb);
wave_1_per_point20=
wave_1_per_point21=a = sin(sqrt(q25)*q4*.01*atan ((x-0.5)/(y-0.5))) < sin( - .3*q29);
wavecode_2_enabled=1
wavecode_2_samples=256
wavecode_2_sep=0
wavecode_2_bSpectrum=1
wavecode_2_bUseDots=0
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=0.420
wave_2_per_frame1=samples = 256*1800/q18;
wave_2_per_point1=//init
wave_2_per_point2=zs = if(below(zs,-9.42478),0,zs);
wave_2_per_point3=
wave_2_per_point4=zs = if(above(zs, 9.42478),0, zs);
wave_2_per_point5=
wave_2_per_point6=speed = .002*asin(1)*floor(q3*pow(.4*q27, .3*sqrt(q5)))*(asin(1)*atan(bass*bass) + asin(1)*atan(mid*mid) + asin(1)*atan(treb*treb)); 
wave_2_per_point7=
wave_2_per_point8=//sum
wave_2_per_point9=zs += speed; 
wave_2_per_point10=
wave_2_per_point11=//project position and radius and pattern speed & beat detection
wave_2_per_point12=x = 0.5 + (0.02*pow(q24, .85) + sin(((q4*.004*asin(1))))*pow(q3*.5, .35)*.1)*cos(zs*asin(1)*100);
wave_2_per_point13=y = 0.5 + (0.02*pow(q24, .85) + sin(((q4*.004*asin(1))))*pow(q3*.5, .35)*.1)*sin(zs*asin(1)*100);
wave_2_per_point14=
wave_2_per_point15=
wave_2_per_point16=// color waveform to bass / mid / treble
wave_2_per_point17=if(above(mid + treb, bass*2), r = .5 - abs(.6*sin( - 3.1416*sqrt(q29 + q3)*bass*x*y)), r = .5 + abs(.55*sin( - 3.1416*sqrt(q29 + q3)*bass*x*y)));
wave_2_per_point18=if(above(bass + treb, mid*2), g = .5 - abs(.6*sin( - 3.1416*sqrt(q23)*mid*x*y)), g = .5 + abs(.55*sin( - 3.1416*sqrt(q23)*mid*x*y)));
wave_2_per_point19=if(above(mid + bass, treb*2), b = .5 - abs(.6*sin( - 3.1416*sqrt(q29)*treb*x*y)), b = .5 + abs(.55*sin( - 3.1416*sqrt(q29)*treb*x*y)));
wave_2_per_point20=
wave_2_per_point21=a = sin(sqrt(q25)*q4*.01*atan ((x-0.5)/(y-0.5))) < sin(- .3*q29);
wavecode_3_enabled=0
wavecode_3_samples=512
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=0
wavecode_3_bDrawThick=1
wavecode_3_bAdditive=0
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=1.000
shapecode_0_enabled=0
shapecode_0_sides=30
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.890
shapecode_0_y=0.860
shapecode_0_rad=0.92324
shapecode_0_ang=0.00000
shapecode_0_tex_ang=1.19381
shapecode_0_tex_zoom=0.22740
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.500
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=0.000
shapecode_0_border_g=0.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_init1=tex_saw = 0.4;
shapecode_1_enabled=0
shapecode_1_sides=30
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.160
shapecode_1_y=0.730
shapecode_1_rad=0.99980
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=0.21006
shapecode_1_r=1.000
shapecode_1_g=1.000
shapecode_1_b=1.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=1.000
shapecode_1_b2=1.000
shapecode_1_a2=0.000
shapecode_1_border_r=0.000
shapecode_1_border_g=0.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_init1=tex_saw = 0.4;
shapecode_2_enabled=0
shapecode_2_sides=100
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.22167
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=1.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=1.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=1.000
shapecode_3_enabled=1
shapecode_3_sides=100
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.10000
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=1.000
shapecode_3_r2=1.000
shapecode_3_g2=1.000
shapecode_3_b2=1.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_per_frame1=a = above(q4,1000) && above(q3, 1.4);
shape_3_per_frame2=a2 = 0;
shape_3_per_frame3=
shape_3_per_frame4=xx = rand(100)*0.01;
shape_3_per_frame5=yy = rand(100)*0.01;
shape_3_per_frame6=radi = sqrt(q3)*.333;
shape_3_per_frame7=
shape_3_per_frame8=rad = radi;
shape_3_per_frame9=
shape_3_per_frame10=x = xx;
shape_3_per_frame11=y = yy;
shape_3_per_frame12=
shape_3_per_frame13=if(above(mid + treb, bass*2), r = .5 - abs(.6*sin( - 3.1416*sqrt(q29 + q3)*bass*x*y)), r = .5 + abs(.55*sin( - 3.1416*sqrt(q29 + q3)*bass*x*y)));
shape_3_per_frame14=if(above(bass + treb, mid*2), g = .5 - abs(.6*sin( - 3.1416*sqrt(q23)*mid*x*y)), g = .5 + abs(.55*sin( - 3.1416*sqrt(q23)*mid*x*y)));
shape_3_per_frame15=if(above(mid + bass, treb*2), b = .5 - abs(.6*sin( - 3.1416*sqrt(q29)*treb*x*y)), b = .5 + abs(.55*sin( - 3.1416*sqrt(q29)*treb*x*y)));
shape_3_per_frame16=
shape_3_per_frame17=r2 = .5 - .55*sin( - 3.1416*sqrt(q29 + q3)*bass*bass);
shape_3_per_frame18=g2 = .5 - .55*sin( - 3.1416*sqrt(q23)*mid*mid);
shape_3_per_frame19=b2 = .5 - .55*sin( - 3.1416*sqrt(q29)*treb*treb);
per_frame_init_1=index = 0;
per_frame_init_2=loop (200000,
per_frame_init_3=  megabuf(index) = 0;
per_frame_init_4=  gmegabuf(index) = 0;
per_frame_init_5=  index = index + 1;
per_frame_init_6=);
per_frame_init_7=
per_frame_init_8=tstart = time;
per_frame_init_9=
per_frame_init_10=bd_recsz   = 8;
per_frame_init_11=bd_oct     = 4; //Oktaven
per_frame_init_12=bd_spo     = 30;//Res. pro Oktave
per_frame_init_13=bd_finc    = pow(2.0,1/bd_spo); //Freq. Incr. 
per_frame_init_14=bd_nres    = bd_oct * bd_spo;
per_frame_init_15=bd_minbpm  = 20;
per_frame_init_16=bd_maxbpm  = pow(2,bd_oct)*bd_minbpm;
per_frame_init_17=
per_frame_init_18=//mem spaces
per_frame_init_19=bd_dat0    = 100000;
per_frame_init_20=bd_tab0     = bd_dat0 + bd_nres * bd_recsz * 3;
per_frame_init_21=
per_frame_init_22=
per_frame_init_23=//Fill BPM Tab
per_frame_init_24=//n = bd_dat0;
per_frame_init_25=//BPM = bd_minbpm;
per_frame_init_26=//loop (bd_nres,gmegabuf (n) = BPM; BPM *=  bd_finc; n += bd_recsz;);
per_frame_init_27=
per_frame_init_28=
per_frame_init_29=//##### nur fuer Darstellung
per_frame_init_30=reg00 = bd_minbpm;
per_frame_init_31=reg01 = bd_maxbpm;
per_frame_init_32=reg02 = bd_recsz;
per_frame_init_33=reg03 = bd_nres;
per_frame_init_34=reg05 = bd_finc;
per_frame_init_35=
per_frame_init_36=reg06 = bd_dat0;
per_frame_init_37=reg07 = bd_mp0;
per_frame_init_38=
per_frame_init_39=time_st = 0;
per_frame_init_40=timediff = 1;
per_frame_init_41=
per_frame_init_42=n = 0; loop (20000, megabuf(n)=0; gmegabuf(n)=0; n +=1; );
per_frame_init_43=
per_frame_init_44=num_rings= 28; reg00 = num_rings;
per_frame_init_45=
per_frame_init_46=ringsize = 100; reg01 = ringsize;
per_frame_init_47=size0 = 20;   reg02 = size0;
per_frame_init_48=
per_frame_init_49=ring = 0;
per_frame_init_50=loop (num_rings,
per_frame_init_51=  megabuf(ring*ringsize+ringsize-1) = ring+size0;
per_frame_init_52=ring +=1);
per_frame_init_53=
per_frame_init_54=//Storage
per_frame_init_55=//ringsize-1: Size
per_frame_init_56=//ringsize-2: slow mean
per_frame_init_57=//ringsize-3: fast mean
per_frame_init_58=//ringsize-4: Flip
per_frame_init_59=
per_frame_init_60=pi = 3.1416;
per_frame_1=q5 = 30/fps;
per_frame_2=
per_frame_3=//############## THIS IS A CONSTRUCTION SITE #########
per_frame_4=
per_frame_5=dt = min (1/fps,0.1) ; //Stability !
per_frame_6=dec_m = 1-dt*4; dec_s = 1 - dt; dec_xs = 1-dt/6;
per_frame_7=t0 = time - tstart;
per_frame_8=
per_frame_9=bd_b =  bass; bd_bass_ = bd_bass_*dec_m + (1-dec_m)*bd_b; bd_bass = bd_b-bd_bass_;
per_frame_10=bd_m =  mid ; bd_mid_  = bd_mid_ *dec_m + (1-dec_m)*bd_m; bd_mid =  bd_m -bd_mid_;
per_frame_11=bd_t =  treb; bd_treb_ = bd_treb_*dec_m + (1-dec_m)*bd_t; bd_treb = bd_t-bd_treb_;
per_frame_12=
per_frame_13=n = 0; BPM = bd_minbpm; 
per_frame_14=loop (bd_nres, 
per_frame_15=  gmegabuf(50000+n*bd_recsz) = 0; 
per_frame_16=  bd_arg = BPM/60*t0*6.283; 
per_frame_17=  gmegabuf (bd_tab0+n*bd_recsz) = BPM; 
per_frame_18=  BPM *= bd_finc;
per_frame_19=n+=1);
per_frame_20=
per_frame_21=bd_src=0;
per_frame_22=loop (3, bd_exc = bd_bass*(bd_src==0) + bd_mid*(bd_src==1) + bd_treb*(bd_src==2);
per_frame_23=  oct = 0;
per_frame_24=  loop (bd_oct,
per_frame_25=    bd_slot = 0;
per_frame_26=    bd_pk = 0; bd_mean = 0.0;
per_frame_27=    loop (bd_spo,
per_frame_28=      bd_tabptr = bd_tab0 +                 (oct*bd_spo+ bd_slot)*bd_recsz;
per_frame_29=      n        =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ bd_slot)*bd_recsz;
per_frame_30=      BPM = gmegabuf(bd_tabptr); bd_omega = BPM/60*6.283;
per_frame_31=      Feder = sqr(bd_omega); //Res.f = sqrt (Feder)/2pi (Hz)
per_frame_32=      gmegabuf (n+4) = gmegabuf(n+2); //alte pos
per_frame_33=      gmegabuf (n+1) *= 1-.5*dt * sqrt (BPM/300); //damping
per_frame_34=
per_frame_35=      EC_Steps = int (1 + BPM/50)*2;
per_frame_36=      loop (EC_Steps, // Euler-Cauchy steps
per_frame_37=        Kraft = bd_exc - Feder*gmegabuf(n + 2) ;
per_frame_38=        gmegabuf (n+1) += Kraft         * dt/EC_Steps;
per_frame_39=        gmegabuf (n+2) += gmegabuf(n+1) * dt/EC_Steps;  
per_frame_40=      );
per_frame_41=      beatcos = gmegabuf(n+1);  beatsin = gmegabuf(n+2)*bd_omega;
per_frame_42=      quad = sqrt (pow(beatsin,2) + pow(beatcos,2));
per_frame_43=      gmegabuf (n) = gmegabuf(n)*0.8 + 0.2*quad;
per_frame_44=      bd_ampl = gmegabuf(n);
per_frame_45=      bd_mean += bd_ampl;
per_frame_46=      if (bd_ampl > bd_pk, bd_pk=bd_ampl, 0);
per_frame_47=    bd_slot +=1;);
per_frame_48= // Komb. bass,mid,treb
per_frame_49=    bd_slot = 0;    
per_frame_50=    bd_qual = pow(bd_pk/bd_mean*bd_spo-1,1);
per_frame_51=    gmegabuf((bd_src*bd_oct+oct)*2) = bd_qual;
per_frame_52=    loop (bd_spo,
per_frame_53=      m =  50000 + (bd_slot + 0*oct*bd_spo)*bd_recsz;
per_frame_54=      n =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ bd_slot)*bd_recsz; //#2x berechnet
per_frame_55=      gmegabuf(m) += (bd_qual)*gmegabuf (n)/12;
per_frame_56=    bd_slot +=1;);
per_frame_57=  oct += 1;);
per_frame_58=bd_src +=1;);
per_frame_59=
per_frame_60=
per_frame_61=//Get maxind
per_frame_62=bd_slot = 0; maxind = 0; bd_pk = 0; bd_mean = 0;
per_frame_63=loop (bd_spo,
per_frame_64=   m =  50000 + bd_slot*bd_recsz;
per_frame_65=   gmegabuf(m) = pow(gmegabuf(m),1);
per_frame_66=   bd_mean += gmegabuf(m);
per_frame_67=   if (gmegabuf(m) > bd_pk, bd_pk = gmegabuf(m); maxind = bd_slot, 0);
per_frame_68=bd_slot += 1);
per_frame_69=quali = bd_pk/bd_mean*bd_spo-1;
per_frame_70=
per_frame_71=n = 0; loop (150, gmegabuf(50+n) *= 0; n+=1);
per_frame_72=
per_frame_73=//KREISE
per_frame_74=bd_src = 0; tsin = 0; tcos = 0;
per_frame_75=loop (3,
per_frame_76=  oct = 0;  
per_frame_77=  loop (bd_oct,
per_frame_78=    n         =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ maxind)*bd_recsz;
per_frame_79=    bd_tabptr = bd_tab0  +                 (oct*bd_spo+ maxind)*bd_recsz;
per_frame_80=    BPM = gmegabuf(bd_tabptr); 
per_frame_81=
per_frame_82=    im =  gmegabuf(n+1);
per_frame_83=    re =  gmegabuf(n+2) * BPM/60*6.283;
per_frame_84=    bd_cos =  cos (BPM/60*6.28*time);
per_frame_85=    bd_sin = -sin (BPM/60*6.28*time);
per_frame_86=
per_frame_87=//Winkel zurueckdrehen. Das sind nun die Winkel relativ zu cos(oct*time).
per_frame_88=    re0 =  re*bd_cos + im*bd_sin;
per_frame_89=    im0 = -re*bd_sin + im*bd_cos;
per_frame_90=    bd_qual = gmegabuf((bd_src*bd_oct+oct)*2);
per_frame_91=    gmegabuf (50+oct*4)   +=  bd_qual * (im0)*1;
per_frame_92=    gmegabuf (50+oct*4+1) +=  bd_qual * (re0)*1;
per_frame_93=    gmegabuf (50+oct*4+2) +=  bd_qual;
per_frame_94=
per_frame_95=//Summe der besten Beitraege. Das ist der Referenzwinkel.
per_frame_96=    gmegabuf (100+0)  +=  bd_qual * im0;
per_frame_97=    gmegabuf (100+1)  +=  bd_qual * re0;
per_frame_98=
per_frame_99=//Nun sollten wir die Differenzwinkel zur Ref berechnen. Und was damit ? Dann kann ich die
per_frame_100=//Einzelwinkel auf Ref bringen - bringt doch nichts !
per_frame_101=//Ich kann alle auf Null drehen, daraus sinusse erzeuge und addieren ->besserer Takt ?
per_frame_102=    re =  (bd_cos*re0 + bd_sin*im0);
per_frame_103=    im =  (-bd_cos*im0 + bd_sin*re0);
per_frame_104=tsin += im*5;
per_frame_105=//rsin == re*5;
per_frame_106=
per_frame_107=  oct += 1);
per_frame_108=bd_src +=1);
per_frame_109=q27 = 10*bd_pk;
per_frame_110=q30 = tsin;
per_frame_111=
per_frame_112=q23 = quali;
per_frame_113=
per_frame_114=q24 = bd_ampl*10;
per_frame_115=
per_frame_116=volAmpl = volAmpl*(1 - .0225) + 10*bd_ampl*.0225;
per_frame_117=q25 = volAmpl;
per_frame_118=
per_frame_119=q22 = .98*pow(q23*q25, .02);
per_frame_120=
per_frame_121=vol = bass_att + mid_att + treb_att;
per_frame_122=vol_ = vol_*0.95 + 0.05*vol;
per_frame_123=q29 = vol-vol_;
per_frame_124=
per_frame_125=//Welche Oktave ???
per_frame_126=bd_src = 0; maxo = 0; maxs = 0; maxa = 0;
per_frame_127=loop (3,
per_frame_128=  oct = 1;  
per_frame_129=  loop (bd_oct-1,
per_frame_130=    n =  bd_dat0 + (bd_nres*bd_src +oct*bd_spo+ maxind)*bd_recsz;
per_frame_131=    bd_qual = gmegabuf((bd_src*bd_oct+oct)*2);
per_frame_132=
per_frame_133=    ampl = bd_qual / (1+oct*(maxind/bd_oct)*0);
per_frame_134=    if (ampl>maxa, maxa = ampl; maxs = bd_src; maxo = oct;, 0);
per_frame_135=  oct += 1);
per_frame_136=bd_src +=1);
per_frame_137=
per_frame_138=q31 = bd_qual;
per_frame_139=//q31 = q28;
per_frame_140=q32 = 4/bd_qual;
per_frame_141=//if(above(q28,50),q28 = pow(5*sin(.5*bd_qual), 2), 0);
per_frame_142=
per_frame_143=//Beat-Flash
per_frame_144=testi = bd_nres*maxs +bd_spo*maxo + maxind;
per_frame_145=if (bor (beat && (prog==0), abs(testi-test0)<2),test0 = testi,0);
per_frame_146=n =  bd_dat0 + (test0)*bd_recsz;
per_frame_147=creep = gmegabuf(n+1);
per_frame_148=//beat =  (creep>0) * (creepo <0);
per_frame_149=//beatct = if (change, 0, beatct+beat);
per_frame_150=//prog = (prog+beat)%8;
per_frame_151=creepo = creep;
per_frame_152=show = if (beat, 1, show*0.5);
per_frame_153=q4 = (gmegabuf(n+1)/gmegabuf(n)*1000);
per_frame_154=//q2 = sqrt(prog + 1);
per_frame_155=
per_frame_156=
per_frame_157=
per_frame_158=
per_frame_159=
per_frame_160=
per_frame_161=finsComp_pf = finsComp; 
per_frame_162=if((finsComp == floor((n - 100000)*.004)), 
per_frame_163=    finTime_st = time; finTime = time - finTime_st; finsComp = floor((n - 100000)*.004),
per_frame_164=    if(finTime < 2.5, 
per_frame_165=        finsComp_pf = finsComp; finTime = time - finTime_st, 
per_frame_166=        finsComp = floor((n - 100000)*.004); finTime_st = time));
per_frame_167=if(above(finTime, 300), finTime_st = time, 0);
per_frame_168=q26 = finsComp_pf;
per_frame_169=
per_frame_170=
per_frame_171=dt = min (time-otime,0.1) ; //Stability !
per_frame_172=otime = time;
per_frame_173=dec_f = 0.8; dec_m = 1 - 4*dt; dec_s = 1 - dt;dec_xs = 1 - dt/4;
per_frame_174=vol = (bass_att + mid_att + treb_att);
per_frame_175=avg = avg*dec_m + (1-dec_m)*vol;
per_frame_176=
per_frame_177=exc = atan(vol-avg)/3;
per_frame_178=exc_ = exc*0.8 + 0.2*exc*2;
per_frame_179=
per_frame_180=//exc = sin(time*6.283)*0.1;
per_frame_181=
per_frame_182=ring = 0; maxind = 0; maxv = 0; sum=0;
per_frame_183=
per_frame_184=loop (num_rings,
per_frame_185=  n = ring * ringsize;
per_frame_186=  size = megabuf(n+ringsize-1);; 
per_frame_187=  excite = exc*(size)/size0;
per_frame_188=  memcpy (n+1,n,ringsize-5); //!!!wichtig
per_frame_189=  megabuf (n) = megabuf(n+size)*(1-0.003*size) + excite;
per_frame_190=  sig = megabuf(n);
per_frame_191=
per_frame_192=  dec = 1-0.4/size; //slow
per_frame_193=  m = n+ringsize-2;
per_frame_194=  megabuf (m) = dec*megabuf(m) + (1-dec)* pow(sig,2);
per_frame_195=  mean = sqrt(megabuf(m));
per_frame_196=  gmegabuf(5000+ring) = mean; 
per_frame_197=  if (mean > maxv , maxv = mean; maxind = ring, 0);
per_frame_198=
per_frame_199=  dec = 1-2/size; //fast
per_frame_200=  m = n+ringsize-3;
per_frame_201=  megabuf (m) = dec*megabuf(m) + (1-dec)* pow(sig,2);
per_frame_202=  mean = sqrt(megabuf(m)); //fast
per_frame_203=  gmegabuf(6000+ring) = mean; 
per_frame_204=
per_frame_205=  sig2 = (megabuf(n+size)+megabuf(n)+megabuf(n+1) )/3;
per_frame_206=  if (sig > 1.2*mean, trip=1, trip=0);
per_frame_207=  m = n+ringsize-4;
per_frame_208=  megabuf (m) = trip;
per_frame_209= ring += 1;
per_frame_210=);
per_frame_211=
per_frame_212=beat = megabuf(maxind*ringsize+ringsize-4);
per_frame_213=//t0 = if (beat, time, t0);
per_frame_214=//q8 = bor (beat, time-t0<0.1);
per_frame_215=//if (beat, t0=time, 0);
per_frame_216=q21 = mean;
per_frame_217=q17 = pow(mean/(q25), .35);
per_frame_218=
per_frame_219=n = 0;
per_frame_220=loop (num_rings*ringsize,
per_frame_221=  gmegabuf (n) = megabuf(n);
per_frame_222=n += 1);
per_frame_223=
per_frame_224=if(beat, timediff = time - time_st; time_st = time, timediff = timediff); 
per_frame_225=if(above(timediff, 100), timediff = 1, timediff = timediff);
per_frame_226=q8 = timediff;
per_frame_227=q2 = pow(.3, q8);
per_frame_228=avgtime = avgtime*(1 - .025*sqrt(q5)) + q8*.025;
per_frame_229=q9 = avgtime;
per_frame_230=q10 = -.0333*pow(.5*mean/pow(q9, .25), .333);
per_frame_231=
per_frame_232=//Selbst bei Barbie Girl fehlt manchmal der Rhythmus in Band 2,
per_frame_233=//obwohl das der gefuehlte Takt ist - >Problem mit Phasenkorrektur !
per_frame_234=//stehen Phasen bei doppelter Frequenz in Relation ? NEIN.
per_frame_235=
per_frame_236=
per_frame_237=
per_frame_238=
per_frame_239=
per_frame_240=//Problem: Fats Domino (1992) hat 55BPM -> Problem mit 110
per_frame_241=//Problem: 1991 London Beat I been thinking about you - geht nicht - solved
per_frame_242=//Problem: U96 - Love religion (1995) beginnt mit BPM < 20
per_frame_243=//Porblem: adiemus (1995)
per_frame_244=//Konflikt-Beat siehe Michale jackson b&W (1991)
per_frame_245=
per_frame_246=
per_frame_247=//q24 = bd_maxbpm;
per_frame_248=q18 = pixelsx;
per_frame_249=
per_frame_250=
per_frame_251=
per_frame_252=old_bass_flop=bass_flop;
per_frame_253=old_treb_flop=treb_flop;
per_frame_254=old_mid_flop=mid_flop;
per_frame_255=chaos=.9+.1*sin(pulse);
per_frame_256=entropy=if(equal(pulse,-20),1+bass_flop+treb_flop+mid_flop+q4*.002,entropy);
per_frame_257=bass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.6)*chaos+1.6);
per_frame_258=bass_flop=abs(bass_flop-equal(bass_thresh,2));
per_frame_259=treb_thresh=above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.6)*chaos+1.6);
per_frame_260=treb_flop=abs(treb_flop-equal(treb_thresh,2));
per_frame_261=mid_thresh=above(mid_att,mid_thresh)*2 + (1-above(mid_att,mid_thresh))*((mid_thresh-1.6)*chaos+1.6);
per_frame_262=mid_flop=abs(mid_flop-equal(mid_thresh,2));
per_frame_263=bass_changed=bnot(equal(old_bass_flop,bass_flop));
per_frame_264=mid_changed=bnot(equal(old_mid_flop,mid_flop));
per_frame_265=treb_changed=bnot(equal(old_treb_flop,treb_flop));
per_frame_266=bass_residual = bass_changed*sin(pulse*1.5) + bnot(bass_changed)*bass_residual;
per_frame_267=treb_residual = treb_changed*sin(pulse*1.5) + bnot(treb_changed)*treb_residual;
per_frame_268=mid_residual = mid_changed*sin(pulse*1.5) + bnot(mid_changed)*mid_residual;
per_frame_269=pulse=if(above(abs(pulse),20),-20,pulse+(bass_thresh+mid_thresh+treb_thresh)*.018);
per_frame_270=q11=mid_residual;
per_frame_271=q12=bass_residual;
per_frame_272=q13=treb_residual;
per_frame_273=q14=sin(pulse);
per_frame_274=q15=cos(pulse*(.5+.1*entropy));
per_frame_275=q16=sin(pulse*(.5+pow(.25,entropy)));
per_frame_276=if(above(mid + treb, bass*2), ib_r = .55 - abs(.6*sin( - 3*sqrt(q3 + q29)*bass_att*bass_att)), ib_r = .55 + abs(.55*sin( - 3*sqrt(q3 + q29)*bass_att*bass_att)));
per_frame_277=if(above(bass + treb, mid*2), ib_g = .55 - abs(.6*sin( - sqrt(q23)*mid*mid)), ib_g = .5 + abs(.55*sin( - sqrt(q23)*mid*mid)));
per_frame_278=if(above(mid + bass, treb*2), ib_b = .55 - abs(.6*sin( - sqrt(q29)*treb_att*treb_att)), ib_b = .55 + abs(.55*sin( - sqrt(q29)*treb_att*treb_att)));
per_frame_279=ob_r = .5 - .55*sin( - 3*sqrt(q3 + q29)*bass*_attbass_att);
per_frame_280=ob_g = .5 - .55*sin( - sqrt(q23)*mid*mid);
per_frame_281=ob_b = .5 - .55*sin( - sqrt(q29)*treb_att*treb_att);
per_frame_282=ib_size=.03+.02*q12;
per_frame_283=ob_size=.02+.015*sin(time*2.321+q12*.2);
per_frame_284=ob_a=.9+.1*q13;
per_frame_285=ib_a=.9+.1*sin(q12*.3+q14+q11*.5);
per_frame_286=rot=0;
per_frame_287=
per_frame_288=
per_frame_289=
per_frame_290=basstime += q29*.1*30/fps;
per_frame_291=q1 = basstime;
per_frame_292=
per_frame_293=//start in most active range
per_frame_294=basstime = if(below(basstime, -10000), 0, basstime);
per_frame_295=basstime = if(above(basstime, 10000), 0, basstime);
per_frame_296=
per_frame_297=basstime += bass_att*0.025 * 30/fps;
per_frame_298=vol2 = pow(bass+mid+treb,2);
per_frame_299=basssum = vol2;
per_frame_300=
per_frame_301=stickybit = time%2;
per_frame_302=
per_frame_303=//avg vol
per_frame_304=//buffer 1
per_frame_305=volAvg = volAvg + vol2*equal(stickybit,1);
per_frame_306=//number of samples 1 or framerate
per_frame_307=sample1 = sample1 + equal(stickybit,1);
per_frame_308=//buffer 2
per_frame_309=volAvg2 = volAvg2 + vol2*equal(stickybit,0);
per_frame_310=//number of samples 2
per_frame_311=sample2 = sample2 + equal(stickybit,0);
per_frame_312=
per_frame_313=//transision
per_frame_314=edge = bnot(equal(bit2,stickybit));
per_frame_315=
per_frame_316=volAvg = volAvg - volAvg*edge*stickybit;
per_frame_317=volAvg2 = volAvg2 - volAvg2*edge*equal(stickybit,0);
per_frame_318=
per_frame_319=sample1 = sample1  - sample1*edge*stickybit;
per_frame_320=sample2 = sample2  - sample2*edge*equal(stickybit,0);
per_frame_321=
per_frame_322=//test vol against avg buffer lvl
per_frame_323=diff = if(equal(stickybit,1), (basssum/(volAvg2/sample2)) , 0);
per_frame_324=diff = if(equal(stickybit,0), (basssum/(volAvg/sample1)), diff);
per_frame_325=
per_frame_326=q3 = diff;
per_frame_327=
per_frame_328=pv_beat = pv_beat*0.1*sqrt(fps/30) + 0.15*pow(q24, .5)*(pow(q3, .75) + q29);
per_frame_329=q6 = pv_beat;
per_frame_330=
per_frame_331=//volPunch = volPunch*0.98382 + pow(q3, 1.5)*0.01618;
per_frame_332=//q10 = volPunch;
per_frame_333=
per_frame_334=bit2 = time%2;
per_frame_335=
per_frame_336=difftime = difftime + diff*0.03;
per_frame_337=//q2 = difftime;
per_frame_338=
per_frame_339=warp = (bass*bass + mid*mid + treb*treb)*.001;
per_frame_340=
per_frame_341=
per_frame_342=
per_frame_343=//monitor = q26 + 5;
per_frame_344=//monitor = pow(.333*q27, .3);
per_frame_345=monitor = 3*pow(q32, .75);
per_frame_346=//monitor = q10;
per_frame_347=//monitor = pow(q8, .3);
per_frame_348=
per_frame_349=//monitor = .2*pow(q9*q21, .3)* - .11;
per_frame_350=//monitor = pow(sqrt(q21)/(q25), .333);
per_frame_351=//monitor = .99*pow(q23*q25, .02);
per_frame_352=
per_pixel_1=    rot=if(above(q14,0),pow(rad, .8*pow(q8, .15))*.0667*q12*q29, cos(-1.5708 + 1.5708*pow(rad, .8*pow(q8, .15))*q12));
per_pixel_2=    zoom=if(above(q12,0),zoom+(1-zoom)*rot*cos(pow(rad, .8*pow(q8, .15))*q12*.25*q29),if(above(q13,0)*above(x,.5*pow(q9, .333)),zoom+(1-zoom)*sin(q13*rot*.25*q29),zoom+(1-zoom)*cos(pow(rad, .8*pow(q8, .15))*q11*.25*q29)));
per_pixel_3=    dx=above(q11,0)*sin(pow(rad, .8*pow(q21, .15))*.5*q12);
per_pixel_4=    dy=above(q11,0)*sin(pow(rad, .8*pow(q21, .15))*.5*q13);
warp_1=`shader_body
warp_2=`{
warp_3=`    ret = GetBlur1(tex2D(sampler_pw_main, frac(uv_orig)));
warp_4=`    
warp_5=`    float retx = (1 - ret.x)*(1 - ret.y)*(1 - ret.z);
warp_6=`
warp_7=`    float2 d = -6*pow(q25, .3)*texsize.zw*(2.5*pow(retx, .333)*sqrt(q23) 
warp_8=`               + .04*sqrt(q21)*lum(GetBlur2(ret)) 
warp_9=`               + .0333*floor(1.25*sqrt(q32)*pow(GetBlur3(ret.x)*GetBlur3(ret.y)*GetBlur3(ret.z), .333)));
warp_10=`
warp_11=`    float3 dx = ( GetBlur1(uv_orig + float2(1,0)*d) - GetBlur1(uv_orig-float2(1,0)*d) );
warp_12=`    float3 dy = ( GetBlur1(uv_orig + float2(0,1)*d) - GetBlur1(uv_orig-float2(0,1)*d) );
warp_13=`
warp_14=`    float2 uv_dy = uv_orig 
warp_15=`        + (.3*float2(lum(dx), lum(dy)) 
warp_16=`        - .1*(float2(dx.x, dy.x)*sqrt(q21) 
warp_17=`              + float2(dx.y, dy.y)*sqrt(q23)
warp_18=`              + float2(dx.z, dy.z)*sqrt(.1*q27)))*texsize.zw*6*sqrt(q5);
warp_19=`
warp_20=`    ret = GetPixel(uv_dy) - (ret 
warp_21=`        - float3(sqrt(bass_att*(1 - GetPixel(uv_orig).y)*(1 - GetPixel(uv_orig).z)), 
warp_22=`                 sqrt(mid_att*(1 - GetPixel(uv_orig).x)*(1 - GetPixel(uv_orig).z)), 
warp_23=`                 sqrt(treb_att*(1 - GetPixel(uv_orig).x)*(1 - GetPixel(uv_orig).y))) )*0.0014*pow(q25, .2);
warp_24=`
warp_25=`    ret = lerp(ret.xyz, 
warp_26=`               q22*tex2D(sampler_pc_main, uv_orig).xyz, 
warp_27=`               .1*float3(bass_att, mid_att, treb_att));
warp_28=`    ret = lerp(ret, 
warp_29=`               lerp(tex2D(sampler_pc_main, uv), 
warp_30=`                    tex2D(sampler_pw_main, frac(uv)), 
warp_31=`                    saturate(q6 - .9*pow(q8, .3))), 
warp_32=`               (q6*lum(pow(float3(ret.x, ret.y, 1.3*ret.z) + .15, pow(q23, .25))))> pow(q8, .3));
warp_33=`    ret += .00667*(pow(q3, .667) - .25)*tex2D( sampler_pw_main, frac(uv_orig) );
warp_34=`}
comp_1=`#define sat saturate
comp_2=`static float z, z0, radi;
comp_3=`static float2 uv1, uv2, uva, dz;
comp_4=`static const int anz = 31;
comp_5=`static const float2 moonpos = .5;
comp_6=`static const float2 hor = texsize.zw*float2(1,0);
comp_7=`static const float2 ver = texsize.zw*float2(1,0).yx;
comp_8=`float3 Get1 (float2 uvi, float par)
comp_9=`{return lerp(GetBlur1(uvi), GetPixel(uvi), 0*saturate(par/2))*par;}
comp_10=`
comp_11=`shader_body
comp_12=`{
comp_13=`
comp_14=`    uva = (uv-0.5)*aspect.xy + .5;
comp_15=`    float moon = (pow(q24, .333) / length (uva-moonpos));
comp_16=`
comp_17=`    dz.x = lum(GetPixel(uv-hor)) - lum(GetPixel(uv+hor));
comp_18=`    dz.y = lum(GetPixel(uv-ver)) - lum(GetPixel(uv+ver));
comp_19=`
comp_20=`    float3 shine = GetPixel(uv*.95 + .025); 
comp_21=`    uv2 = (uv-moonpos)*1.4 + moonpos;
comp_22=`   
comp_23=`    radi = q10;
comp_24=`
comp_25=`    for (int n=1; n <= anz; n++)
comp_26=`    { 
comp_27=`      uv2 = (normalize(uv-moonpos)*radi+moonpos);
comp_28=`      shine += 2.5/anz*Get1((uv-moonpos)*radi+moonpos,radi) ;
comp_29=`      radi -= 0.75/anz;;
comp_30=`    }
comp_31=`
comp_32=`
comp_33=`    float2 uv_temp1 = (uv - 0.5) * texsize.xy;
comp_34=`    float2 c = ((uv-0.5)*aspect.wz);
comp_35=`    float rad_hq = length(uv_temp1);
comp_36=`    float ang_hq = atan2(c.x,-c.y);
comp_37=`
comp_38=`    uv2 = (uv2-0.5);
comp_39=`    float rad2 = rad_hq*.85;
comp_40=`    float ang2 = ang_hq * M_INV_PI_2;
comp_41=`
comp_42=`        // FIN TYPE
comp_43=`        float fins = (q26 + 5);
comp_44=`        ang2 = frac(ang2*fins)/fins;
comp_45=`              // ENABLE THIS TO MAKE THE FINS ALTERNATE: (seamless!)
comp_46=`              ang2 = abs(ang2 - 0.5/fins);
comp_47=`
comp_48=`    ang2 *= M_PI_2;
comp_49=`    uv = 0.5 + rad2*float2(cos(ang2),sin(ang2))*texsize.zw;
comp_50=`
comp_51=`    ret = pow(GetBlur1(uv)*((tex2D(sampler_pc_main,uv)-GetBlur2(uv))), .667*sqrt(q31)); //invert
comp_52=`    float3 ret_t = refract(max(-sqrt(.45 + .25*q11)*shine, pow(GetPixel(uv), pow(.4/q24, .15)) + .05), (pow(GetPixel(uv), lum(exp(shine)))), .7 + .3*abs(q13)*sign(q13));
comp_53=`    float3 ret_s = min(pow(pow(q23, .333), -shine), -pow(GetPixel(uv), pow(.333*q31, .2)*shine) );                                                  
comp_54=`    float3 ret_r = refract(ret_t, -ret_s, .8 + .2*abs(q12)*sign(q12));
comp_55=`
comp_56=`    ret_s = lerp(ret_t, (ret_s), lerp(max(pow(.3*q27, .2)*shine, -shine), min(shine, pow(ret, ang2))/pow(q9, .125), -ret_r*pow(.333*q31, .2)));
comp_57=`    ret = (-lerp(max(pow(cross((pow(.5/pow(q1, .05), ret_r)), pow(.5/pow(q8, .05), ret_s)), 1/pow(q23, .075)), pow(1-exp(-ret_s), pow(q25, .125))), lerp(ret_t, ret_r, ret_s), pow(max(shine, -shine) , min(shine, -shine)) ));
comp_58=`
comp_59=`}
comp_60=`
